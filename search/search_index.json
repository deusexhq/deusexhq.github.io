{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WIP.","title":"Home"},{"location":"about/","text":"About Deus Ex (usually abbreviated \"DX\") is a first-person role-playing singleplayer game developed by Ion Storm's Austin office (the company was closed in 2005) and published by Eidos Interactive on June 22, 2000. The game uses heavily-modified Unreal Tournament '99 engine and although it was planned as solely a singleplayer game, the multiplayer was later added. The developer has also released a Software Development Kit (SDK), allowing players to modify the standard game and create add-ons. Singleplayer You play as a nano-augmented rookie UNATCO (\"United Nations Anti Terrorist Coalition\") agent with codename JC Denton in a dystopian world of the near future (2050s). The world is turned to chaos by global corporations, terrorism and cureless pandemia, called \"Gray Death\". Following the storyline, JC Denton finds out that things are not as simple, as they seem. Deus Ex has a very flexible gameplay, characterized by ability to choose in every its aspect: from a set of augmentations in JC's body to the world's future. All situations can be solved in a variety of ways dependent upon the individual playstyle and views of the player on the state of affairs. Deus Ex includes typical elements of RPG games, such as organizable inventory, skillpoints, division into minor and primary tasks, etc. Multiplayer The multiplayer mode of the game has inherited peculiarity of the singleplayer, including skillpoints and augmentations. Even though Deus Ex Multiplayer (usually abbreviated as \"DXMP\") has a remarkable gameplay compared with the mighty of the industry, it did not become so popular, as the singleplayer, mainly due to the difference between release dates. But although the community is small, it remains being lively and creative. It has also overcome geographical barriers and most of the games are played by people all over the world. There are plenty of mods, allowing to play the game in a variety of ways. Release Info Deus Ex was released for: Microsoft Windows, Mac OS (converted by Aspyr Media Inc ), Playstation 2 (published as \"Deus Ex: The Conspiracy\"). Deus Ex was supposed to be ported to Linux by Loki Software Inc , but the company went out of business before releasing it. However, you may run Deus Ex on Linux using Wine program loader. Deus Ex 2: Invisible War was released for PC and Xbox. Editions Deus Ex (the first game; released on 2000; latest version 1112fm or GOTY). Download 1112fm patch if you don't have it and your Deus Ex is not a GOTY edition. Free pre-release demo. Download (142 MB). Deus Ex (1002f). Deus Ex: GOTY (latest version) \u2014 \"Game Of The Year\" edition. Deus Ex / Deus Ex GOTY SoldOut. How to play without a CD? Deus Ex: The Conspiracy, for Playstation 2. Deus Ex: Invisible War (the original game sequel; released on 2004; latest version 1.2) Free pre-release demo. PC versions: 1.0. 1.2. If your version is lower, it's recommended that you update it . Patch 1.2 includes patch 1.1. Xbox version. Engines Deus Ex uses Unreal Engine 1.5, build 400\u2014436. Deus Ex: The Conspiracy (PS2 version of Deus Ex) uses Unreal Engine 1.5, build 436. Deus Ex: Invisible War uses Unreal Engine 2.0, build 777. Deus Ex Invisible War or Deus Ex 2 is a sequel, released in 2004. The protagonist of the game is \"Alex D\", a 21-year-old male or female (players can pick both Alex's gender and skin color). Some of the characters from the original game reprise their roles in this sequel, including Paul & JC Denton, Tracer Tong, Nicolette DuClare, and Chad Dumier. As in the original, the action takes place in a number of real-world locations, including Seattle, an arcology and a surrounding Medina in Cairo, the Black Gate and its environment in Trier in Germany, Antarctica, and concluding on an ice-bound Liberty Island, the starting point of the first game. Like its predecessor, the game features non-linear gameplay, while still retaining a largely linear central plot. Similarly, nanotechnology and conspiracy theories again play a major role in the action. The plot once more concerns the conflict between different secretive organizations, such as the WTO, The Order (both of which are later shown to be branches of The Illuminati) and The Knights Templar. However, some players feel that an in-depth story line took a back seat for more action. This is possibly due to the removal of some items from the original Deus Ex, such as computers that allow the player to read e-mail, as well as less character development. (Source: Wikipedia ). Is there a multiplayer for Deus Ex 2? No. The fact that multiplayer would not present in the game was announced already during early stages of development. Is there a SDK (editor) for Deus Ex 2? No. Ion Storm announced that it would be too hard to understand. However, they released a SDK for Thief 3, which uses the same engine. Is there going to be Deus Ex 3? The following is speculation, as there is no current proof that Deus Ex 3 will ever be made - No. When Deus Ex 2 was in development, Ion Storm (the developer) announced that Deus Ex 3 was in early stage of development. However Deus Ex 2 was a failure and Ion Storm was ceased as a company by Eidos Interactive (the publisher). There was no news about Deus Ex 3 afterwards and doubtfully Eidos is going to continue the series, after Warren Spector (the director of Deus Ex and Ion Storm) left to his own game design studio, and the rest of developers were assigned between other studios owned by Eidos. The IP (Intellectual Property) for Deus Ex is owned by Eidos. Update 03/12/07 - Although, recent activity from Eidos Montreal may be the introducing to Deus Ex 3, see the Forums, catagory Deus Ex 3 for details. Update Final - Deus Ex 3 was announced and released, as was Deus Ex 4, as Human Revolution and Mankind Divided respectively. Is Snowblind Deus Ex 3? Project: Snowblind was originally conceived as a multiplayer-focused third game in the Deus Ex series, Deus Ex: Clan Wars, but after the less than expected commercial performance of Deus Ex: Invisible War, it was decided to set the game in its own universe. It remains a spiritual sequel to Deus Ex and retains many visible links to its progenitors, although it's a completely different game and doesn't have a lot in common with Deus Ex Multiplayer.","title":"About"},{"location":"actor/","text":"Actor abstract, native, nativereplication Actor: The base class of all actors. This is a built-in Unreal class and it shouldn't be modified. Properties // DEUS_EX STM enum EAIEventState { EAISTATE_Begin, EAISTATE_End, EAISTATE_Pulse, EAISTATE_ChangeBest }; enum EAIEventType { EAITYPE_Visual, EAITYPE_Audio, EAITYPE_Olifactory }; struct XAIParams { var actor BestActor; var float Score; var float Visibility; var float Volume; var float Smell; }; // DEUS_EX AJY enum EBarkModes { BM_Idle, BM_CriticalDamage, BM_AreaSecure, BM_TargetAcquired, BM_TargetLost, BM_GoingForAlarm, BM_OutOfAmmo, BM_Scanning, BM_Futz, BM_OnFire, BM_TearGas, BM_Gore, BM_Surprise, BM_PreAttackSearching, BM_PreAttackSighting, BM_PostAttackSearching, BM_SearchGiveUp, BM_AllianceHostile, BM_AllianceFriendly }; // Flags. var(Advanced) const bool bStatic; // Does not move or change over time. var(Advanced) bool bHidden; // Is hidden during gameplay. var(Advanced) const bool bNoDelete; // Cannot be deleted during play. var bool bAnimFinished; // Unlooped animation sequence has finished. var bool bAnimLoop; // Whether animation is looping. var bool bAnimNotify; // Whether a notify is applied to the current sequence. var bool bAnimByOwner; // Animation dictated by owner. var const bool bDeleteMe; // About to be deleted. var transient const bool bAssimilated; // Actor dynamics are assimilated in world geometry. var transient const bool bTicked; // Actor has been updated. var transient bool bLightChanged; // Recalculate this light's lighting now. var bool bDynamicLight; // Temporarily treat this as a dynamic light. var bool bTimerLoop; // Timer loops (else is one-shot). // Other flags. var(Advanced) bool bCanTeleport; // This actor can be teleported. var(Advanced) bool bIsSecretGoal; // This actor counts in the \"secret\" total. var(Advanced) bool bIsKillGoal; // This actor counts in the \"death\" toll. var(Advanced) bool bIsItemGoal; // This actor counts in the \"item\" count. var(Advanced) bool bCollideWhenPlacing; // This actor collides with the world when placing. var(Advanced) bool bTravel; // Actor is capable of travelling among servers. var(Advanced) bool bMovable; // Actor is capable of travelling among servers. var(Advanced) bool bHighDetail; // Only show up on high-detail. var(Advanced) bool bStasis; // In StandAlone games, turn off if not in a recently rendered zone turned off if bCanStasis and physics = PHYS_None or PHYS_Rotating. var(Advanced) bool bForceStasis; // Force stasis when not recently rendered, even if physics not none or rotating. var const bool bIsPawn; // True only for pawns. var(Advanced) const bool bNetTemporary; // Tear-off simulation in network play. var(Advanced) const bool bNetOptional; // Actor should only be replicated if bandwidth available. var bool bReplicateInstigator; // Replicate instigator to client (used by bNetTemporary projectiles). var bool bTrailerSameRotation; // If PHYS_Trailer and true, have same rotation as owner. var bool bTrailerPrePivot; // If PHYS_Trailer and true, offset from owner by PrePivot. var bool bClientAnim; var bool bSimFall; // dumb proxy should simulate fall // DEUS_EX STM - added new flags var(Advanced) bool bBlockSight; // True if pawns can't see through this actor. var(Advanced) bool bDetectable; // True if this actor can be detected (by sight, sound, etc). var(Advanced) bool bTransient; // True if this actor should be destroyed when it goes into stasis var bool bIgnore; // True if this actor should be generally ignored; compliance is voluntary // Priority Parameters // Actor's current physics mode. var(Movement) const enum EPhysics { PHYS_None, PHYS_Walking, PHYS_Falling, PHYS_Swimming, PHYS_Flying, PHYS_Rotating, PHYS_Projectile, PHYS_Rolling, PHYS_Interpolating, PHYS_MovingBrush, PHYS_Spider, PHYS_Trailer } Physics; // Net variables. enum ENetRole { ROLE_None, // No role at all. ROLE_DumbProxy, // Dumb proxy of this actor. ROLE_SimulatedProxy, // Locally simulated proxy of this actor. ROLE_AutonomousProxy, // Locally autonomous proxy of this actor. ROLE_Authority, // Authoritative control over the actor. }; var ENetRole Role; var(Networking) ENetRole RemoteRole; // DEUS_EX STM - added for stasis var float LastRenderTime; var float DistanceFromPlayer; // Owner. var const Actor Owner; // Owner actor. var(Object) name InitialState; var(Object) name Group; // Execution and timer variables. var float TimerRate; // Timer event, 0=no timer. var const float TimerCounter; // Counts up until it reaches TimerRate. var(Advanced) float LifeSpan; // How old the object lives before dying, 0=forever. // Animation variables. var(Display) name AnimSequence; // Animation sequence we're playing. var(Display) float AnimFrame; // Current animation frame, 0.0 to 1.0. var(Display) float AnimRate; // Animation rate in frames per second, 0=none, negative=velocity scaled. var float TweenRate; // Tween-into rate. var(Display) float LODBias; // Blending animation variables - DEUS_EX CNN var name BlendAnimSequence[4]; var float BlendAnimFrame[4]; var float BlendAnimRate[4]; var float BlendTweenRate[4]; //----------------------------------------------------------------------------- // Structures. // Identifies a unique convex volume in the world. struct PointRegion { var zoneinfo Zone; // Zone. var int iLeaf; // Bsp leaf. var byte ZoneNumber; // Zone number. }; //----------------------------------------------------------------------------- // Major actor properties. // Scriptable. var const LevelInfo Level; // Level this actor is on. var transient const Level XLevel; // Level object. var(Events) name Tag; // Actor's tag name. var(Events) name Event; // The event this actor causes. var Actor Target; // Actor we're aiming at (other uses as well). var Pawn Instigator; // Pawn responsible for damage. var travel Inventory Inventory; // Inventory chain. (DEUS_EX STM - added \"travel\") var const Actor Base; // Moving brush actor we're standing on. var const PointRegion Region; // Region this actor is in. var(Movement) name AttachTag; // Internal. var const byte StandingCount; // Count of actors standing on this actor. var const byte MiscNumber; // Internal use. var const byte LatentByte; // Internal latent function use. var const int LatentInt; // Internal latent function use. var const float LatentFloat; // Internal latent function use. var const actor LatentActor; // Internal latent function use. var const actor Touching[4]; // List of touching actors. var const actor Deleted; // Next actor in just-deleted chain. // Internal tags. var const transient int CollisionTag, LightingTag, NetTag, OtherTag, ExtraTag, SpecialTag; // The actor's position and rotation. var(Movement) const vector Location; // Actor's location; use Move to set. var(Movement) const rotator Rotation; // Rotation. var const vector OldLocation; // Actor's old location one tick ago. var const vector ColLocation; // Actor's old location one move ago. var(Movement) vector Velocity; // Velocity. var vector Acceleration; // Acceleration. //Editing flags var(Advanced) bool bHiddenEd; // Is hidden during editing. var(Advanced) bool bDirectional; // Actor shows direction arrow during editing. var const bool bSelected; // Selected in UnrealEd. var const bool bMemorized; // Remembered in UnrealEd. var const bool bHighlighted; // Highlighted in UnrealEd. var bool bEdLocked; // Locked in editor (no movement or rotation). var(Advanced) bool bEdShouldSnap; // Snap to grid in editor. var transient bool bEdSnap; // Should snap to grid in UnrealEd. var transient const bool bTempEditor; // Internal UnrealEd. // What kind of gameplay scenarios to appear in. var(Filter) bool bDifficulty0; // Appear in difficulty 0. var(Filter) bool bDifficulty1; // Appear in difficulty 1. var(Filter) bool bDifficulty2; // Appear in difficulty 2. var(Filter) bool bDifficulty3; // Appear in difficulty 3. var(Filter) bool bSinglePlayer; // Appear in single player. var(Filter) bool bNet; // Appear in regular network play. var(Filter) bool bNetSpecial; // Appear in special network play mode. var(Filter) float OddsOfAppearing; // 0-1 - chance actor will appear in relevant game modes. //----------------------------------------------------------------------------- // Display properties. // Drawing effect. var(Display) enum EDrawType { DT_None, DT_Sprite, DT_Mesh, DT_Brush, DT_RopeSprite, DT_VerticalSprite, DT_Terraform, DT_SpriteAnimOnce, } DrawType; // Style for rendering sprites, meshes. var(Display) enum ERenderStyle { STY_None, STY_Normal, STY_Masked, STY_Translucent, STY_Modulated, } Style; // Other display properties. var(Display) texture Sprite; // Sprite texture if DrawType=DT_Sprite. var(Display) texture Texture; // Misc texture. var(Display) texture Skin; // Special skin or enviro map texture. var(Display) mesh Mesh; // Mesh if DrawType=DT_Mesh. var const export model Brush; // Brush if DrawType=DT_Brush. var(Display) float DrawScale; // Scaling factor, 1.0=normal size. var vector PrePivot; // Offset from box center for drawing. var(Display) float ScaleGlow; // Multiplies lighting. var(Display) byte AmbientGlow; // Ambient brightness, or 255=pulsing. var(Display) byte Fatness; // Fatness (mesh distortion). // Display. var(Display) bool bUnlit; // Lights don't affect actor. var(Display) bool bNoSmooth; // Don't smooth actor's texture. var(Display) bool bParticles; // Mesh is a particle system. var(Display) bool bRandomFrame; // Particles use a random texture from among the default texture and the multiskins textures var(Display) bool bMeshEnviroMap; // Environment-map the mesh. var(Display) bool bMeshCurvy; // Curvy mesh. var(Display) float VisibilityRadius;// Actor is drawn if viewer is within its visibility var(Display) float VisibilityHeight;// cylinder. Zero=infinite visibility. // Not yet implemented. var(Display) bool bShadowCast; // Casts shadows. // Advanced. var(Advanced) bool bOwnerNoSee; // Everything but the owner can see this actor. var(Advanced) bool bOnlyOwnerSee; // Only owner can see this actor. var Const bool bIsMover; // Is a mover. var(Advanced) bool bAlwaysRelevant; // Always relevant for network. var Const bool bAlwaysTick; // Update even when players-only. var bool bHurtEntry; // keep HurtRadius from being reentrant var(Advanced) bool bGameRelevant; // Always relevant for game var bool bCarriedItem; // being carried, and not responsible for displaying self, so don't replicated location and rotation var bool bForcePhysicsUpdate; // force a physics update for simulated pawns // Multiple skin support. var(Display) texture MultiSkins[8]; //----------------------------------------------------------------------------- // Sound. // Ambient sound. var(Sound) byte SoundRadius; // Radius of ambient sound. var(Sound) byte SoundVolume; // Volume of amient sound. var(Sound) byte SoundPitch; // Sound pitch shift, 64.0=none. var(Sound) sound AmbientSound; // Ambient sound effect. // Regular sounds. var(Sound) float TransientSoundVolume; var(Sound) float TransientSoundRadius; // Sound slots for actors. enum ESoundSlot { SLOT_None, SLOT_Misc, SLOT_Pain, SLOT_Interact, SLOT_Ambient, SLOT_Talk, SLOT_Interface, }; // Music transitions. enum EMusicTransition { MTRAN_None, MTRAN_Instant, MTRAN_Segue, MTRAN_Fade, MTRAN_FastFade, MTRAN_SlowFade, }; //----------------------------------------------------------------------------- // Collision. // Collision size. var(Collision) const float CollisionRadius; // Radius of collision cyllinder. var(Collision) const float CollisionHeight; // Half-height cyllinder. // Collision flags. var(Collision) const bool bCollideActors; // Collides with other actors. var(Collision) bool bCollideWorld; // Collides with the world. var(Collision) bool bBlockActors; // Blocks other nonplayer actors. var(Collision) bool bBlockPlayers; // Blocks other player actors. var(Collision) bool bProjTarget; // Projectiles should potentially target this actor. //----------------------------------------------------------------------------- // Lighting. // Light modulation. var(Lighting) enum ELightType { LT_None, LT_Steady, LT_Pulse, LT_Blink, LT_Flicker, LT_Strobe, LT_BackdropLight, LT_SubtlePulse, LT_TexturePaletteOnce, LT_TexturePaletteLoop } LightType; // Spatial light effect to use. var(Lighting) enum ELightEffect { LE_None, LE_TorchWaver, LE_FireWaver, LE_WateryShimmer, LE_Searchlight, LE_SlowWave, LE_FastWave, LE_CloudCast, LE_StaticSpot, LE_Shock, LE_Disco, LE_Warp, LE_Spotlight, LE_NonIncidence, LE_Shell, LE_OmniBumpMap, LE_Interference, LE_Cylinder, LE_Rotor, LE_Unused } LightEffect; // Lighting info. var(LightColor) byte LightBrightness, LightHue, LightSaturation; // Light properties. var(Lighting) byte LightRadius, LightPeriod, LightPhase, LightCone, VolumeBrightness, VolumeRadius, VolumeFog; // Lighting. var(Lighting) bool bSpecialLit; // Only affects special-lit surfaces. var(Lighting) bool bActorShadows; // Light casts actor shadows. var(Lighting) bool bCorona; // Light uses Skin as a corona. var(Lighting) bool bLensFlare; // Whether to use zone lens flare. //----------------------------------------------------------------------------- // Physics. // Options. var(Movement) bool bBounce; // Bounces when hits ground fast. var(Movement) bool bFixedRotationDir; // Fixed direction of rotation. var(Movement) bool bRotateToDesired; // Rotate to DesiredRotation. var bool bInterpolating; // Performing interpolating. var const bool bJustTeleported; // Used by engine physics - not valid for scripts. // Dodge move direction. var enum EDodgeDir { DODGE_None, DODGE_Left, DODGE_Right, DODGE_Forward, DODGE_Back, DODGE_Active, DODGE_Done } DodgeDir; // Physics properties. var(Movement) float Mass; // Mass of this actor. var(Movement) float Buoyancy; // Water buoyancy. var(Movement) rotator RotationRate; // Change in rotation per second. var(Movement) rotator DesiredRotation; // Physics will rotate pawn to this if bRotateToDesired. var float PhysAlpha; // Interpolating position, 0.0-1.0. var float PhysRate; // Interpolation rate per second. var Actor PendingTouch; // Actor touched during move which wants to add an effect after the movement completes //----------------------------------------------------------------------------- // Animation. // Animation control. var float AnimLast; // Last frame. var float AnimMinRate; // Minimum rate for velocity-scaled animation. var float OldAnimRate; // Animation rate of previous animation (= AnimRate until animation completes). var plane SimAnim; // replicated to simulated proxies. // Blending Animation control - DEUS_EX CNN var float BlendAnimLast[4]; // Last frame. var float BlendAnimMinRate[4]; // Minimum rate for velocity-scaled animation. var float OldBlendAnimRate[4]; // Animation rate of previous animation (= AnimRate until animation completes). var plane SimBlendAnim[4]; // replicated to simulated proxies. // Conversation Related Variables - DEUS_EX AJY var(Conversation) String BindName; // Used to bind conversations var(Conversation) String BarkBindName; // Used to bind Barks! var(Conversation) localized String FamiliarName; // For display in Conversations var(Conversation) localized String UnfamiliarName; // For display in Conversations var transient Object ConListItems; // List of ConListItems for this Actor var travel float LastConEndTime; // Time when last conversation ended var(Conversation) float ConStartInterval; // Amount of time required between two convos. // Additional variables for AI - DEUS_EX STM var float VisUpdateTime; var float CurrentVisibility; var float LastVisibility; var(Smell) class<SmellNode> SmellClass; var SmellNode LastSmellNode; var(Advanced) bool bOwned; // End additional variables - DEUS_EX STM // DEUS_EX AMSD Added to make vision aug run faster. If true, the vision aug needs to check this object more closely. // Used for heat sources as well as things that blind. var bool bVisionImportant; //----------------------------------------------------------------------------- // Networking. // Network control. var(Networking) float NetPriority; // Higher priorities means update it more frequently. var(Networking) float NetUpdateFrequency; // How many seconds between net updates. var(Networking) float RelevantRadius; //Radius in which things are always relevant. // Symmetric network flags, valid during replication only. var const bool bNetInitial; // Initial network update. var const bool bNetOwner; // Player owns this actor. var const bool bNetRelevant; // Actor is currently relevant. Only valid server side, only when replicating variables. var const bool bNetSee; // Player sees it in network play. var const bool bNetHear; // Player hears it in network play. var const bool bNetFeel; // Player collides with/feels it in network play. var const bool bSimulatedPawn; // True if Pawn and simulated proxy. var const bool bDemoRecording; // True we are currently demo recording var const bool bClientDemoRecording;// True we are currently recording a client-side demo var const bool bClientDemoNetFunc;// True if we're client-side demo recording and this call originated from the remote. //----------------------------------------------------------------------------- // Enums. // Travelling from server to server. enum ETravelType { TRAVEL_Absolute, // Absolute URL. TRAVEL_Partial, // Partial (carry name, reset server). TRAVEL_Relative, // Relative URL. }; // Input system states. enum EInputAction { IST_None, // Not performing special input processing. IST_Press, // Handling a keypress or button press. IST_Hold, // Handling holding a key or button. IST_Release, // Handling a key or button release. IST_Axis, // Handling analog axis movement. }; // Input keys. enum EInputKey { /*00*/ IK_None ,IK_LeftMouse ,IK_RightMouse ,IK_Cancel , /*04*/ IK_MiddleMouse ,IK_Unknown05 ,IK_Unknown06 ,IK_Unknown07 , /*08*/ IK_Backspace ,IK_Tab ,IK_Unknown0A ,IK_Unknown0B , /*0C*/ IK_Unknown0C ,IK_Enter ,IK_Unknown0E ,IK_Unknown0F , /*10*/ IK_Shift ,IK_Ctrl ,IK_Alt ,IK_Pause , /*14*/ IK_CapsLock ,IK_Unknown15 ,IK_Unknown16 ,IK_Unknown17 , /*18*/ IK_Unknown18 ,IK_Unknown19 ,IK_Unknown1A ,IK_Escape , /*1C*/ IK_Unknown1C ,IK_Unknown1D ,IK_Unknown1E ,IK_Unknown1F , /*20*/ IK_Space ,IK_PageUp ,IK_PageDown ,IK_End , /*24*/ IK_Home ,IK_Left ,IK_Up ,IK_Right , /*28*/ IK_Down ,IK_Select ,IK_Print ,IK_Execute , /*2C*/ IK_PrintScrn ,IK_Insert ,IK_Delete ,IK_Help , /*30*/ IK_0 ,IK_1 ,IK_2 ,IK_3 , /*34*/ IK_4 ,IK_5 ,IK_6 ,IK_7 , /*38*/ IK_8 ,IK_9 ,IK_Unknown3A ,IK_Unknown3B , /*3C*/ IK_Unknown3C ,IK_Unknown3D ,IK_Unknown3E ,IK_Unknown3F , /*40*/ IK_Unknown40 ,IK_A ,IK_B ,IK_C , /*44*/ IK_D ,IK_E ,IK_F ,IK_G , /*48*/ IK_H ,IK_I ,IK_J ,IK_K , /*4C*/ IK_L ,IK_M ,IK_N ,IK_O , /*50*/ IK_P ,IK_Q ,IK_R ,IK_S , /*54*/ IK_T ,IK_U ,IK_V ,IK_W , /*58*/ IK_X ,IK_Y ,IK_Z ,IK_Unknown5B , /*5C*/ IK_Unknown5C ,IK_Unknown5D ,IK_Unknown5E ,IK_Unknown5F , /*60*/ IK_NumPad0 ,IK_NumPad1 ,IK_NumPad2 ,IK_NumPad3 , /*64*/ IK_NumPad4 ,IK_NumPad5 ,IK_NumPad6 ,IK_NumPad7 , /*68*/ IK_NumPad8 ,IK_NumPad9 ,IK_GreyStar ,IK_GreyPlus , /*6C*/ IK_Separator ,IK_GreyMinus ,IK_NumPadPeriod,IK_GreySlash , /*70*/ IK_F1 ,IK_F2 ,IK_F3 ,IK_F4 , /*74*/ IK_F5 ,IK_F6 ,IK_F7 ,IK_F8 , /*78*/ IK_F9 ,IK_F10 ,IK_F11 ,IK_F12 , /*7C*/ IK_F13 ,IK_F14 ,IK_F15 ,IK_F16 , /*80*/ IK_F17 ,IK_F18 ,IK_F19 ,IK_F20 , /*84*/ IK_F21 ,IK_F22 ,IK_F23 ,IK_F24 , /*88*/ IK_Unknown88 ,IK_Unknown89 ,IK_Unknown8A ,IK_Unknown8B , /*8C*/ IK_Unknown8C ,IK_Unknown8D ,IK_Unknown8E ,IK_Unknown8F , /*90*/ IK_NumLock ,IK_ScrollLock ,IK_Unknown92 ,IK_Unknown93 , /*94*/ IK_Unknown94 ,IK_Unknown95 ,IK_Unknown96 ,IK_Unknown97 , /*98*/ IK_Unknown98 ,IK_Unknown99 ,IK_Unknown9A ,IK_Unknown9B , /*9C*/ IK_Unknown9C ,IK_Unknown9D ,IK_Unknown9E ,IK_Unknown9F , /*A0*/ IK_LShift ,IK_RShift ,IK_LControl ,IK_RControl , /*A4*/ IK_UnknownA4 ,IK_UnknownA5 ,IK_UnknownA6 ,IK_UnknownA7 , /*A8*/ IK_UnknownA8 ,IK_UnknownA9 ,IK_UnknownAA ,IK_UnknownAB , /*AC*/ IK_UnknownAC ,IK_UnknownAD ,IK_UnknownAE ,IK_UnknownAF , /*B0*/ IK_UnknownB0 ,IK_UnknownB1 ,IK_UnknownB2 ,IK_UnknownB3 , /*B4*/ IK_UnknownB4 ,IK_UnknownB5 ,IK_UnknownB6 ,IK_UnknownB7 , /*B8*/ IK_UnknownB8 ,IK_UnknownB9 ,IK_Semicolon ,IK_Equals , /*BC*/ IK_Comma ,IK_Minus ,IK_Period ,IK_Slash , /*C0*/ IK_Tilde ,IK_UnknownC1 ,IK_UnknownC2 ,IK_UnknownC3 , /*C4*/ IK_UnknownC4 ,IK_UnknownC5 ,IK_UnknownC6 ,IK_UnknownC7 , /*C8*/ IK_Joy1 ,IK_Joy2 ,IK_Joy3 ,IK_Joy4 , /*CC*/ IK_Joy5 ,IK_Joy6 ,IK_Joy7 ,IK_Joy8 , /*D0*/ IK_Joy9 ,IK_Joy10 ,IK_Joy11 ,IK_Joy12 , /*D4*/ IK_Joy13 ,IK_Joy14 ,IK_Joy15 ,IK_Joy16 , /*D8*/ IK_UnknownD8 ,IK_UnknownD9 ,IK_UnknownDA ,IK_LeftBracket , /*DC*/ IK_Backslash ,IK_RightBracket,IK_SingleQuote ,IK_UnknownDF , /*E0*/ IK_JoyX ,IK_JoyY ,IK_JoyZ ,IK_JoyR , /*E4*/ IK_MouseX ,IK_MouseY ,IK_MouseZ ,IK_MouseW , /*E8*/ IK_JoyU ,IK_JoyV ,IK_UnknownEA ,IK_UnknownEB , /*EC*/ IK_MouseWheelUp ,IK_MouseWheelDown,IK_Unknown10E,UK_Unknown10F , /*F0*/ IK_JoyPovUp ,IK_JoyPovDown ,IK_JoyPovLeft ,IK_JoyPovRight , /*F4*/ IK_UnknownF4 ,IK_UnknownF5 ,IK_Attn ,IK_CrSel , /*F8*/ IK_ExSel ,IK_ErEof ,IK_Play ,IK_Zoom , /*FC*/ IK_NoName ,IK_PA1 ,IK_OEMClear }; var(Display) class<RenderIterator> RenderIteratorClass; // class to instantiate as the actor's RenderInterface var transient RenderIterator RenderInterface; // abstract iterator initialized in the Rendering engine Network replication replication { // Relationships. unreliable if( Role==ROLE_Authority ) Owner, Role, RemoteRole; unreliable if( bNetOwner && Role==ROLE_Authority ) bNetOwner, Inventory; unreliable if( bReplicateInstigator && (RemoteRole>=ROLE_SimulatedProxy) && (Role==ROLE_Authority) ) Instigator; // Ambient sound. unreliable if( (Role==ROLE_Authority) && (!bNetOwner || !bClientAnim) ) AmbientSound; unreliable if( AmbientSound!=None && Role==ROLE_Authority && (!bNetOwner || !bClientAnim) ) SoundRadius, SoundVolume, SoundPitch; unreliable if( bDemoRecording ) DemoPlaySound; // Collision. unreliable if( Role==ROLE_Authority ) bCollideActors, bCollideWorld; unreliable if( (bCollideActors || bCollideWorld) && Role==ROLE_Authority ) bProjTarget, bBlockActors, bBlockPlayers, CollisionRadius, CollisionHeight; // Location. unreliable if( !bCarriedItem && (bNetInitial || bSimulatedPawn || RemoteRole<ROLE_SimulatedProxy) && Role==ROLE_Authority ) Location; unreliable if( !bCarriedItem && (DrawType==DT_Mesh || DrawType==DT_Brush) && (bNetInitial || bSimulatedPawn || RemoteRole<ROLE_SimulatedProxy) && Role==ROLE_Authority ) Rotation; unreliable if( RemoteRole==ROLE_SimulatedProxy ) Base; // Events unreliable if( Role==ROLE_authority) Event, Tag; // Velocity. unreliable if( bSimFall || ((RemoteRole==ROLE_SimulatedProxy && (bNetInitial || bSimulatedPawn)) || bIsMover) ) Velocity; // Physics. unreliable if( bSimFall || (RemoteRole==ROLE_SimulatedProxy && bNetInitial && !bSimulatedPawn) ) Physics, Acceleration, bBounce; unreliable if( RemoteRole==ROLE_SimulatedProxy && Physics==PHYS_Rotating && bNetInitial ) bFixedRotationDir, bRotateToDesired, RotationRate, DesiredRotation; // Animation. unreliable if( DrawType==DT_Mesh && ((RemoteRole<=ROLE_SimulatedProxy && (!bNetOwner || !bClientAnim)) || bDemoRecording) ) AnimSequence, BlendAnimSequence; // blended anims added - DEUS_EX CNN unreliable if( DrawType==DT_Mesh && (RemoteRole==ROLE_SimulatedProxy)) bAnimNotify; unreliable if( DrawType==DT_Mesh && (RemoteRole<ROLE_SimulatedProxy)) SimAnim, AnimMinRate, SimBlendAnim, BlendAnimMinRate; // blended anims added - DEUS_EX CNN // Rendering. unreliable if( Role==ROLE_Authority ) bHidden, bOnlyOwnerSee; unreliable if( Role==ROLE_Authority ) Texture, DrawScale, PrePivot, DrawType, AmbientGlow, Fatness, ScaleGlow, bUnlit, Style; unreliable if( DrawType==DT_Sprite && !bHidden && (!bOnlyOwnerSee || bNetOwner) && Role==ROLE_Authority) Sprite; unreliable if( DrawType==DT_Mesh && Role==ROLE_Authority ) Mesh, bMeshEnviroMap, Skin, MultiSkins; unreliable if( DrawType==DT_Brush && Role==ROLE_Authority ) Brush; // Lighting. unreliable if( Role==ROLE_Authority ) LightType; unreliable if( LightType!=LT_None && Role==ROLE_Authority ) LightEffect, LightBrightness, LightHue, LightSaturation, LightRadius, LightPeriod, LightPhase, VolumeBrightness, VolumeRadius, bSpecialLit; // Messages reliable if( Role<ROLE_Authority ) BroadcastMessage, BroadcastLocalizedMessage; } Functions ConsoleCommand Execute a console command in the context of the current level and game engine. native function string ConsoleCommand( string Command ); Error Actor error handling. Handle an error and kill this one actor. native(233) final function Error( coerce string S ); Sleep native(256) final latent function Sleep( float Seconds ); Collision native(262) final function SetCollision( optional bool NewColActors, optional bool NewBlockActors, optional bool NewBlockPlayers ); native(283) final function bool SetCollisionSize( float NewRadius, float NewHeight ); Movement native(266) final function bool Move( vector Delta ); native(267) final function bool SetLocation( vector NewLocation ); native(299) final function bool SetRotation( rotator NewRotation ); native(3969) final function bool MoveSmooth( vector Delta ); native(3971) final function AutonomousPhysics(float DeltaSeconds); Relations native(298) final function SetBase( actor NewBase ); native(272) final function SetOwner( actor NewOwner ); AI Functions added DEUS_EX STM native(700) final function float AIGetLightLevel( vector Location ); native(701) final function float AIVisibility(optional bool bIncludeVelocity); native(710) final function AISetEventCallback(name eventName, name callback, optional name scoreCallback, optional bool bCheckVisibility, optional bool bCheckDir, optional bool bCheckCylinder, optional bool bCheckLOS); native(711) final function AIClearEventCallback(name eventName); native(713) final function AISendEvent(name eventName, EAIEventType eventType, optional float Value, optional float Radius); native(714) final function AIStartEvent(name eventName, EAIEventType eventType, optional float Value, optional float Radius); native(715) final function AIEndEvent(name eventName, EAIEventType eventType); native(716) final function AIClearEvent(name eventName); native(717) final function rotator RandomBiasedRotation(int centralYaw, float yawDistribution, int centralPitch, float pitchDistribution); native(718) final function bool IsOverlapping(actor checkActor); native(720) final function PlayerPawn GetPlayerPawn(); native(721) final function bool InStasis(); native(722) final function float ParabolicTrace(out vector finalLocation, optional vector startVelocity, optional vector startLocation, optional bool bCheckActors, optional vector cylinder, optional float maxTime, optional float elasticity, optional bool bBounce, optional float landingSpeed, optional float granularity); native(723) final function float LastRendered(); native(724) final function bool GetBoundingBox(out vector MinVect, out vector MaxVect, optional bool bExact, optional vector testLocation, optional rotator testRotation); Animation native(259) final function PlayAnim( name Sequence, optional float Rate, optional float TweenTime ); native(260) final function LoopAnim( name Sequence, optional float Rate, optional float TweenTime, optional float MinRate ); native(294) final function TweenAnim( name Sequence, float Time ); native(282) final function bool IsAnimating(); native(293) final function name GetAnimGroup( name Sequence ); native(261) final latent function FinishAnim(); native(263) final function bool HasAnim( name Sequence ); // Blending animation function - DEUS_EX CNN native(1010) final function PlayBlendAnim( name Sequence, optional float Rate, optional float TweenTime, optional int BlendSlot ); native(1012) final function TweenBlendAnim( name Sequence, float Time, optional int BlendSlot ); // Gets any numbered texture from a mesh - DEUS_EX CNN native(1013) final function Texture GetMeshTexture( optional int texnum ); // Animation notifications. event AnimEnd(); Physics // Physics control. native(301) final latent function FinishInterpolation(); // DEUS_EX STM - added optional param to SetPhysics() //native(3970) final function SetPhysics( EPhysics newPhysics ); native(3970) final function SetPhysics( EPhysics newPhysics, optional Actor newFloor ); Engine notification functions Major notifications Spawned event Spawned(); Called when actor is Spawned. See also PostBeginPlay , BeginPlay , PreBeginPlay , PostPostBeginPlay . Destroyed event Destroyed(); Called when actor is destroyed and removed from the game. Expired event Expired(); Unknown. Children event GainedChild( Actor Other ); event LostChild( Actor Other ); Called when actor gains/looses a child actor. Tick event Tick( float DeltaTime ); Called every tick, or frame, of the game. Triggers event Trigger( Actor Other, Pawn EventInstigator ); Called when actor is 'Triggered' by the Trigger function. event UnTrigger( Actor Other, Pawn EventInstigator ); Called when actor de-activates, e.i. triggered again to turn off. event BeginEvent(); event EndEvent(); Unknown effects. Physics & world interaction. Timer event Timer(); Called when SetTimer() expires. (See SetTimer ) HitWall event HitWall( vector HitNormal, actor HitWall ); Called when object hits the wall. HitNormal : The vector direction that the actor hit from. HitWall : The wall being hit. Falling event Falling(); Called when actor is falling through the air. Landed event Landed( vector HitNormal ); Called when actor hits the ground. HitNormal : Firection actor landed from ZoneChange event ZoneChange( ZoneInfo NewZone ); Called when actor changes between Zones in the world. NewZone : The ZoneInfo actor controlling the entered zone. Bump/Touch event Bump( Actor Other ); event Touch( Actor Other ); Called when actor hits in to another actor physically. Other : The actor being touched. event PostTouch( Actor Other ); event UnTouch( Actor Other ); Called for PendingTouch actor after physics completes. BaseChange event BaseChange(); Called when actor changes base, meaning the actor that is supporting this one. For example, players standing on a crate, and then standing on the floor, is a BaseChange. Attachment event Attach( Actor Other ); event Detach( Actor Other ); Used for attaching and detaching actors from another. Mostly used for making buttons and switches follow elevators. KillCredit event KillCredit( Actor Other ); Called when something is killed. Other : Actor being credited for a kill. Interpolating event InterpolateEnd( actor Other ); Called when actor finishes its interpolating path. EndedRotation event EndedRotation(); Called when actor stops rotating. Others event Actor SpecialHandling(Pawn Other); event bool EncroachingOn( actor Other ); event EncroachedBy( actor Other ); DEUS_EX STM -- added BumpWall event BumpWall( vector HitLocation, vector HitNormal ); Called when actor hits the wall. HitLocation : The location of the wall being hit. HitNormal : The direction being hit from. SupportActor event SupportActor( actor StandingActor ) { StandingActor.SetBase( self ); } Called when actor is being stood on. OutOfWorld event FellOutOfWorld() { SetPhysics(PHYS_None); Destroy(); } Called when actor falls out of the world, e.g. fell through the geometry and no longer is in the normal play area. Damage and kills event KilledBy( pawn EventInstigator ); Called when actor is killed. EventInstigator : The pawn that killed this actor. event TakeDamage( int Damage, Pawn EventInstigator, vector HitLocation, vector Momentum, name DamageType); Called when the actor takes any damage. Damage : The raw damage being dealt to this actor. EventInstigator : The pawn dealing the damage. HitLocation : The location this actor was hit at. Momentum : The direction this actor will be pushed in. DamageType : The string damage type being dealt. Tracing Trace native(277) final function Actor Trace ( out vector HitLocation, out vector HitNormal, vector TraceEnd, optional vector TraceStart, optional bool bTraceActors, optional vector Extent ); Traces a line and see what it collides with first. Takes this actor's collision properties into account. Returns first hit actor, Level if hit level, or None if hit nothing. HitLocation : The location we've hit. ( out means the variable is usable after the function is called) HitNormal : Not sure. (WIP) TraceEnd : Where we want to trace to. TraceStart : Where the trace starts from. Uses <actor>.location if left out. bTraceActors : Where we collide with actors or not. Extent : The range of the trace (?) FastTrace native(548) final function bool FastTrace ( vector TraceEnd, optional vector TraceStart ); returns true if did not hit world geometry TraceEnd : Where we want to trace to. TraceStart : Where the trace starts from. Uses <actor>.location if left out. Spawn native(278) final function actor Spawn ( class<actor> SpawnClass, optional actor SpawnOwner, optional name SpawnTag, optional vector SpawnLocation, optional rotator SpawnRotation ); Spawn an actor. Returns an actor of the specified class, not of class Actor (this is hardcoded in the compiler). Returns None if the actor could not be spawned (either the actor wouldn't fit in the specified location, or the actor list is full). Defaults to spawning at the spawner's location. SpawnClass : The class we want to spawn. Example: class'DeusEx.Medkit' SpawnOwner : The actor that owns the newly spawned actor. SpawnTag : Sets the Tag of the new actor. SpawnLocation : Location to spawn at. Uses <actor>.location if left out. SpawnRotation : Rocation to spawn at. Uses <actor>.rotation if left out. Destroy native(279) final function bool Destroy(); Destroy this actor. Returns true if destroyed, false if indestructable. Destruction is latent. It occurs at the end of the tick. Timer native(280) final function SetTimer( float NewTimerRate, bool bLoop ); Triggers the Timer() event after NewTimerRate ticks. If bLoop is True then then timer will continue looping, else only triggers once. Sound PlaySound native(264) final function int PlaySound ( sound Sound, optional ESoundSlot Slot, optional float Volume, optional bool bNoOverride, optional float Radius, optional float Pitch ); //Same as PlaySound, but only plays for the client. (No server propogation) native simulated final function PlayOwnedSound(); //PlaySound call used for Demorec system. native simulated event DemoPlaySound(); Play a sound effect. *DEUS_EX - CNN* changed to return the channel ID of the sound so you can call StopSound later Sound : A sound class in the game. Example: sound'LogNoteAdded' ESoundSlot : The slot to play the sound in to. See ESoundSlot variable. Volume : Volume of the sound. bNoOverride : Wether this sound can be overwritten with other sounds on the same slot or not. Radius : Physical hearable radius of the sound. Pitch : Sounds pitch modifier. StopSound native(265) final function StopSound(int Id); DEUS_EX CNN - Stop a sound given the sound's ID SetInstantVolume native(268) final function SetInstantSoundVolume(byte newSoundVolume); native(269) final function SetInstantSpeechVolume(byte newSpeechVolume); native(270) final function SetInstantMusicVolume(byte newMusicVolume); DEUS_EX CNN - Set the sound system volumes without waiting for a tick event GetSoundDuration native final function float GetSoundDuration( sound Sound ); Get a sound duration. AI functions. MakeNoise native(512) final function MakeNoise( float Loudness ); Inform other creatures that you've made a noise they might hear (they are sent a HearNoise message) Senders of MakeNoise should have an instigator if they are not pawns. PlayerCanSeeMe native(532) final function bool PlayerCanSeeMe(); Returns true if some player has a line of sight to actor's location. Teleportation event bool PreTeleport( Teleporter InTeleporter ); Called before actor teleports using a Teleporter actor. event PostTeleport( Teleporter OutTeleporter ); Called after actor teleports using a Teleporter actor. BeginPlay event BeginPlay(); Called when actor enters the game. event PostBeginPlay(); Called immediately after gameplay begins. event PostPostBeginPlay(); DEUS_EX AJY Called immediately after Initial State, and always called when loading a map AND when loading savegame simulated event SetInitialState() { if( InitialState!='' ) GotoState( InitialState ); else GotoState( 'Auto' ); } Called after PostBeginPlay. simulated event PostNetBeginPlay(); MBCODE Called after a net game begins. event PreBeginPlay() { // fake shrink to fix faked collision with floor problems - DEUS_EX CNN if ((IsA('Decoration') || IsA('Inventory')) && (CollisionHeight > 0.75)) SetCollisionSize(CollisionRadius, CollisionHeight - 0.75); else if (IsA('Pawn')) { if (CollisionHeight > 9) SetCollisionSize(CollisionRadius, CollisionHeight - 4.5); else SetCollisionSize(CollisionRadius, CollisionHeight*0.5); } // Handle autodestruction if desired. if( !bGameRelevant && (Level.NetMode != NM_Client) && !Level.Game.IsRelevant(Self) ) Destroy(); } Called immediately before gameplay begins. Disk access. // Find files. native(539) final function string GetMapName( string NameEnding, string MapName, int Dir ); native(545) final function GetNextSkin( string Prefix, string CurrentSkin, int Dir, out string SkinName, out string SkinDesc ); native(547) final function string GetURLMap(); native final function string GetNextInt( string ClassName, int Num ); native final function GetNextIntDesc( string ClassName, int Num, out string Entry, out string Description ); Iterator functions. native(304) final iterator function AllActors ( class<actor> BaseClass, out actor Actor, optional name MatchTag ); native(305) final iterator function ChildActors ( class<actor> BaseClass, out actor Actor ); native(306) final iterator function BasedActors ( class<actor> BaseClass, out actor Actor ); native(307) final iterator function TouchingActors( class<actor> BaseClass, out actor Actor ); native(309) final iterator function TraceActors ( class<actor> BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm, vector End, optional vector Start, optional vector Extent ); native(310) final iterator function RadiusActors ( class<actor> BaseClass, out actor Actor, float Radius, optional vector Loc ); native(311) final iterator function VisibleActors ( class<actor> BaseClass, out actor Actor, optional float Radius, optional vector Loc ); native(312) final iterator function VisibleCollidingActors ( class<actor> BaseClass, out actor Actor, optional float Radius, optional vector Loc, optional bool bIgnoreHidden ); // added by DEUS_EX CNN native(1000) final iterator function TraceTexture (class<actor> BaseClass, out actor Actor, out name texName, out name texGroup, out int flags, out vector HitLoc, out vector HitNorm, vector End, optional vector Start, optional vector Extent); // added by DEUS_EX STM native(1002) final iterator function CycleActors (class<actor> BaseClass, out actor Actor, out int Index ); native(1003) final iterator function TraceVisibleActors(class<actor> BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm, vector End, optional vector Start, optional vector Extent ); Iterators are used in the format of; //Destroy all medkits local Medkit MD; foreach AllActors(class'DeusEx.Medkit', MD) MD.Destroy() Color operators native(549) static final operator(20) color - ( color A, color B ); native(550) static final operator(16) color * ( float A, color B ); native(551) static final operator(20) color + ( color A, color B ); native(552) static final operator(16) color * ( color A, float B ); Scripted Actor functions event RenderOverlays( canvas Canvas ); draw on canvas before flash and fog are applied (used for drawing weapons) BroadcastMessage event BroadcastMessage( coerce string Msg, optional bool bBeep, optional name Type ) { local Pawn P; if (Type == '') Type = 'Event'; // if ( Level.Game.AllowsBroadcast(self, Len(Msg)) ) for( P=Level.PawnList; P!=None; P=P.nextPawn ) if( P.bIsPlayer || P.IsA('MessagingSpectator') ) P.ClientMessage( Msg, Type, bBeep ); } Broadcast a message to all players. Can be called as a function; BroadcastMessage(\"This is seen by everyone.\") bBeep : Defines if the message triggers a chat message beep. (Maybe doesn't work?) Type : Unsure. event BroadcastLocalizedMessage( class<LocalMessage> Message, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject ) { local Pawn P; for ( P=Level.PawnList; P != None; P=P.nextPawn ) if ( P.bIsPlayer || P.IsA('MessagingSpectator') ) P.ReceiveLocalizedMessage( Message, Switch, RelatedPRI_1, RelatedPRI_2, OptionalObject ); } Broadcast a localized message to all players. Most message deal with 0 to 2 related PRIs. The LocalMessage class defines how the PRI's and optional actor are used. HurtRadius final function HurtRadius( float DamageAmount, float DamageRadius, name DamageName, float Momentum, vector HitLocation, optional bool bIgnoreLOS ) { local actor Victims; local float damageScale, dist; local vector dir; // DEUS_EX CNN local Mover M; if( bHurtEntry ) return; bHurtEntry = true; if (!bIgnoreLOS) { foreach VisibleCollidingActors( class 'Actor', Victims, DamageRadius, HitLocation ) { if( Victims != self ) { dir = Victims.Location - HitLocation; dist = FMax(1,VSize(dir)); dir = dir/dist; damageScale = 1 - FMax(0,(dist - Victims.CollisionRadius)/DamageRadius); Victims.TakeDamage ( damageScale * DamageAmount, Instigator, Victims.Location - 0.5 * (Victims.CollisionHeight + Victims.CollisionRadius) * dir, (damageScale * Momentum * dir), DamageName ); } } } else { foreach RadiusActors(class 'Actor', Victims, DamageRadius, HitLocation ) { if( Victims != self ) { dir = Victims.Location - HitLocation; dist = FMax(1,VSize(dir)); dir = dir/dist; damageScale = 1 - FMax(0,(dist - Victims.CollisionRadius)/DamageRadius); Victims.TakeDamage ( damageScale * DamageAmount, Instigator, Victims.Location - 0.5 * (Victims.CollisionHeight + Victims.CollisionRadius) * dir, (damageScale * Momentum * dir), DamageName ); } } } // // DEUS_EX - CNN - damage the movers, also // foreach RadiusActors(class 'Mover', M, DamageRadius, HitLocation) { if( M != self ) { dir = M.Location - HitLocation; dist = FMax(1,VSize(dir)); dir = dir/dist; damageScale = 1 - FMax(0,(dist - M.CollisionRadius)/DamageRadius); M.TakeDamage ( damageScale * DamageAmount, Instigator, M.Location - 0.5 * (M.CollisionHeight + M.CollisionRadius) * dir, (damageScale * Momentum * dir), DamageName ); } } bHurtEntry = false; } Hurt actors within the radius. DamageAmount : Damage done to the actors. DamageRadius : Range of actors to damage. DamageName : Name of the damage. Momentum : Vector to push the damaged actor in. HitLocation : Location to deal the damage to. Only relevant for Pawn actors to damage body parts. bIgnoreLOS : Unsure. Travel event TravelPreAccept(); Called when carried onto a new level, before AcceptInventory. event TravelPostAccept(); Called when carried into a new level, after AcceptInventory. Frob function Frob(Actor Frobber, Inventory frobWith) { } DEUS_EX CNN Called to frob an object, the subclass is responsible for implementing this Frobber will be the actor frobbing this actor. frobWith : Unsure. StopBlendAnims function StopBlendAnims() { local int i; for (i=0; i<ArrayCount(BlendAnimSequence); i++) BlendAnimSequence[i] = ''; } DEUS_EX CNN Stops animations from blending RenderTexture event RenderTexture(ScriptedTexture Tex); Called when a scripted texture needs rendering BecomeViewTarget function BecomeViewTarget(); Called by PlayerPawn when this actor becomes its ViewTarget. GetItemName function String GetItemName( string FullName ) { local int pos; pos = InStr(FullName, \".\"); While ( pos != -1 ) { FullName = Right(FullName, Len(FullName) - pos - 1); pos = InStr(FullName, \".\"); } return FullName; } Returns the string representation of the name of an object without the package prefixes. GetHumanName function String GetHumanName() { return GetItemName(string(class)); } Returns the human readable string representation of an object. SetDisplayProperties function SetDisplayProperties(ERenderStyle NewStyle, texture NewTexture, bool bLighting, bool bEnviroMap ) { Style = NewStyle; texture = NewTexture; bUnlit = bLighting; bMeshEnviromap = bEnviromap; } function SetDefaultDisplayProperties() { Style = Default.Style; texture = Default.Texture; bUnlit = Default.bUnlit; bMeshEnviromap = Default.bMeshEnviromap; } Set the display properties of an actor. By setting them through this function, it allows the actor to modify other components (such as a Pawn's weapon) or to adjust the result based on other factors (such as a Pawn's other inventory wanting to affect the result) EndConversation function EndConversation() { LastConEndTime = Level.TimeSeconds; } Save the time this conversation ended DEUS_EX AJY DefaultProperties defaultproperties { bMovable=True bDetectable=True Role=ROLE_Authority RemoteRole=ROLE_DumbProxy LastRenderTime=-10.000000 LODBias=1.000000 bDifficulty0=True bDifficulty1=True bDifficulty2=True bDifficulty3=True bSinglePlayer=True bNet=True bNetSpecial=True OddsOfAppearing=1.000000 DrawType=DT_Sprite Style=STY_Normal Texture=Texture'Engine.S_Actor' DrawScale=1.000000 ScaleGlow=1.000000 Fatness=128 SoundRadius=32 SoundVolume=128 SoundPitch=64 TransientSoundVolume=1.000000 CollisionRadius=22.000000 CollisionHeight=22.000000 bJustTeleported=True Mass=100.000000 ConStartInterval=5.000000 NetPriority=1.000000 NetUpdateFrequency=100.000000 }","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" /><em>Actor</em>"},{"location":"actor/#actor","text":"abstract, native, nativereplication Actor: The base class of all actors. This is a built-in Unreal class and it shouldn't be modified.","title":"Actor"},{"location":"actor/#properties","text":"// DEUS_EX STM enum EAIEventState { EAISTATE_Begin, EAISTATE_End, EAISTATE_Pulse, EAISTATE_ChangeBest }; enum EAIEventType { EAITYPE_Visual, EAITYPE_Audio, EAITYPE_Olifactory }; struct XAIParams { var actor BestActor; var float Score; var float Visibility; var float Volume; var float Smell; }; // DEUS_EX AJY enum EBarkModes { BM_Idle, BM_CriticalDamage, BM_AreaSecure, BM_TargetAcquired, BM_TargetLost, BM_GoingForAlarm, BM_OutOfAmmo, BM_Scanning, BM_Futz, BM_OnFire, BM_TearGas, BM_Gore, BM_Surprise, BM_PreAttackSearching, BM_PreAttackSighting, BM_PostAttackSearching, BM_SearchGiveUp, BM_AllianceHostile, BM_AllianceFriendly }; // Flags. var(Advanced) const bool bStatic; // Does not move or change over time. var(Advanced) bool bHidden; // Is hidden during gameplay. var(Advanced) const bool bNoDelete; // Cannot be deleted during play. var bool bAnimFinished; // Unlooped animation sequence has finished. var bool bAnimLoop; // Whether animation is looping. var bool bAnimNotify; // Whether a notify is applied to the current sequence. var bool bAnimByOwner; // Animation dictated by owner. var const bool bDeleteMe; // About to be deleted. var transient const bool bAssimilated; // Actor dynamics are assimilated in world geometry. var transient const bool bTicked; // Actor has been updated. var transient bool bLightChanged; // Recalculate this light's lighting now. var bool bDynamicLight; // Temporarily treat this as a dynamic light. var bool bTimerLoop; // Timer loops (else is one-shot). // Other flags. var(Advanced) bool bCanTeleport; // This actor can be teleported. var(Advanced) bool bIsSecretGoal; // This actor counts in the \"secret\" total. var(Advanced) bool bIsKillGoal; // This actor counts in the \"death\" toll. var(Advanced) bool bIsItemGoal; // This actor counts in the \"item\" count. var(Advanced) bool bCollideWhenPlacing; // This actor collides with the world when placing. var(Advanced) bool bTravel; // Actor is capable of travelling among servers. var(Advanced) bool bMovable; // Actor is capable of travelling among servers. var(Advanced) bool bHighDetail; // Only show up on high-detail. var(Advanced) bool bStasis; // In StandAlone games, turn off if not in a recently rendered zone turned off if bCanStasis and physics = PHYS_None or PHYS_Rotating. var(Advanced) bool bForceStasis; // Force stasis when not recently rendered, even if physics not none or rotating. var const bool bIsPawn; // True only for pawns. var(Advanced) const bool bNetTemporary; // Tear-off simulation in network play. var(Advanced) const bool bNetOptional; // Actor should only be replicated if bandwidth available. var bool bReplicateInstigator; // Replicate instigator to client (used by bNetTemporary projectiles). var bool bTrailerSameRotation; // If PHYS_Trailer and true, have same rotation as owner. var bool bTrailerPrePivot; // If PHYS_Trailer and true, offset from owner by PrePivot. var bool bClientAnim; var bool bSimFall; // dumb proxy should simulate fall // DEUS_EX STM - added new flags var(Advanced) bool bBlockSight; // True if pawns can't see through this actor. var(Advanced) bool bDetectable; // True if this actor can be detected (by sight, sound, etc). var(Advanced) bool bTransient; // True if this actor should be destroyed when it goes into stasis var bool bIgnore; // True if this actor should be generally ignored; compliance is voluntary // Priority Parameters // Actor's current physics mode. var(Movement) const enum EPhysics { PHYS_None, PHYS_Walking, PHYS_Falling, PHYS_Swimming, PHYS_Flying, PHYS_Rotating, PHYS_Projectile, PHYS_Rolling, PHYS_Interpolating, PHYS_MovingBrush, PHYS_Spider, PHYS_Trailer } Physics; // Net variables. enum ENetRole { ROLE_None, // No role at all. ROLE_DumbProxy, // Dumb proxy of this actor. ROLE_SimulatedProxy, // Locally simulated proxy of this actor. ROLE_AutonomousProxy, // Locally autonomous proxy of this actor. ROLE_Authority, // Authoritative control over the actor. }; var ENetRole Role; var(Networking) ENetRole RemoteRole; // DEUS_EX STM - added for stasis var float LastRenderTime; var float DistanceFromPlayer; // Owner. var const Actor Owner; // Owner actor. var(Object) name InitialState; var(Object) name Group; // Execution and timer variables. var float TimerRate; // Timer event, 0=no timer. var const float TimerCounter; // Counts up until it reaches TimerRate. var(Advanced) float LifeSpan; // How old the object lives before dying, 0=forever. // Animation variables. var(Display) name AnimSequence; // Animation sequence we're playing. var(Display) float AnimFrame; // Current animation frame, 0.0 to 1.0. var(Display) float AnimRate; // Animation rate in frames per second, 0=none, negative=velocity scaled. var float TweenRate; // Tween-into rate. var(Display) float LODBias; // Blending animation variables - DEUS_EX CNN var name BlendAnimSequence[4]; var float BlendAnimFrame[4]; var float BlendAnimRate[4]; var float BlendTweenRate[4]; //----------------------------------------------------------------------------- // Structures. // Identifies a unique convex volume in the world. struct PointRegion { var zoneinfo Zone; // Zone. var int iLeaf; // Bsp leaf. var byte ZoneNumber; // Zone number. }; //----------------------------------------------------------------------------- // Major actor properties. // Scriptable. var const LevelInfo Level; // Level this actor is on. var transient const Level XLevel; // Level object. var(Events) name Tag; // Actor's tag name. var(Events) name Event; // The event this actor causes. var Actor Target; // Actor we're aiming at (other uses as well). var Pawn Instigator; // Pawn responsible for damage. var travel Inventory Inventory; // Inventory chain. (DEUS_EX STM - added \"travel\") var const Actor Base; // Moving brush actor we're standing on. var const PointRegion Region; // Region this actor is in. var(Movement) name AttachTag; // Internal. var const byte StandingCount; // Count of actors standing on this actor. var const byte MiscNumber; // Internal use. var const byte LatentByte; // Internal latent function use. var const int LatentInt; // Internal latent function use. var const float LatentFloat; // Internal latent function use. var const actor LatentActor; // Internal latent function use. var const actor Touching[4]; // List of touching actors. var const actor Deleted; // Next actor in just-deleted chain. // Internal tags. var const transient int CollisionTag, LightingTag, NetTag, OtherTag, ExtraTag, SpecialTag; // The actor's position and rotation. var(Movement) const vector Location; // Actor's location; use Move to set. var(Movement) const rotator Rotation; // Rotation. var const vector OldLocation; // Actor's old location one tick ago. var const vector ColLocation; // Actor's old location one move ago. var(Movement) vector Velocity; // Velocity. var vector Acceleration; // Acceleration. //Editing flags var(Advanced) bool bHiddenEd; // Is hidden during editing. var(Advanced) bool bDirectional; // Actor shows direction arrow during editing. var const bool bSelected; // Selected in UnrealEd. var const bool bMemorized; // Remembered in UnrealEd. var const bool bHighlighted; // Highlighted in UnrealEd. var bool bEdLocked; // Locked in editor (no movement or rotation). var(Advanced) bool bEdShouldSnap; // Snap to grid in editor. var transient bool bEdSnap; // Should snap to grid in UnrealEd. var transient const bool bTempEditor; // Internal UnrealEd. // What kind of gameplay scenarios to appear in. var(Filter) bool bDifficulty0; // Appear in difficulty 0. var(Filter) bool bDifficulty1; // Appear in difficulty 1. var(Filter) bool bDifficulty2; // Appear in difficulty 2. var(Filter) bool bDifficulty3; // Appear in difficulty 3. var(Filter) bool bSinglePlayer; // Appear in single player. var(Filter) bool bNet; // Appear in regular network play. var(Filter) bool bNetSpecial; // Appear in special network play mode. var(Filter) float OddsOfAppearing; // 0-1 - chance actor will appear in relevant game modes. //----------------------------------------------------------------------------- // Display properties. // Drawing effect. var(Display) enum EDrawType { DT_None, DT_Sprite, DT_Mesh, DT_Brush, DT_RopeSprite, DT_VerticalSprite, DT_Terraform, DT_SpriteAnimOnce, } DrawType; // Style for rendering sprites, meshes. var(Display) enum ERenderStyle { STY_None, STY_Normal, STY_Masked, STY_Translucent, STY_Modulated, } Style; // Other display properties. var(Display) texture Sprite; // Sprite texture if DrawType=DT_Sprite. var(Display) texture Texture; // Misc texture. var(Display) texture Skin; // Special skin or enviro map texture. var(Display) mesh Mesh; // Mesh if DrawType=DT_Mesh. var const export model Brush; // Brush if DrawType=DT_Brush. var(Display) float DrawScale; // Scaling factor, 1.0=normal size. var vector PrePivot; // Offset from box center for drawing. var(Display) float ScaleGlow; // Multiplies lighting. var(Display) byte AmbientGlow; // Ambient brightness, or 255=pulsing. var(Display) byte Fatness; // Fatness (mesh distortion). // Display. var(Display) bool bUnlit; // Lights don't affect actor. var(Display) bool bNoSmooth; // Don't smooth actor's texture. var(Display) bool bParticles; // Mesh is a particle system. var(Display) bool bRandomFrame; // Particles use a random texture from among the default texture and the multiskins textures var(Display) bool bMeshEnviroMap; // Environment-map the mesh. var(Display) bool bMeshCurvy; // Curvy mesh. var(Display) float VisibilityRadius;// Actor is drawn if viewer is within its visibility var(Display) float VisibilityHeight;// cylinder. Zero=infinite visibility. // Not yet implemented. var(Display) bool bShadowCast; // Casts shadows. // Advanced. var(Advanced) bool bOwnerNoSee; // Everything but the owner can see this actor. var(Advanced) bool bOnlyOwnerSee; // Only owner can see this actor. var Const bool bIsMover; // Is a mover. var(Advanced) bool bAlwaysRelevant; // Always relevant for network. var Const bool bAlwaysTick; // Update even when players-only. var bool bHurtEntry; // keep HurtRadius from being reentrant var(Advanced) bool bGameRelevant; // Always relevant for game var bool bCarriedItem; // being carried, and not responsible for displaying self, so don't replicated location and rotation var bool bForcePhysicsUpdate; // force a physics update for simulated pawns // Multiple skin support. var(Display) texture MultiSkins[8]; //----------------------------------------------------------------------------- // Sound. // Ambient sound. var(Sound) byte SoundRadius; // Radius of ambient sound. var(Sound) byte SoundVolume; // Volume of amient sound. var(Sound) byte SoundPitch; // Sound pitch shift, 64.0=none. var(Sound) sound AmbientSound; // Ambient sound effect. // Regular sounds. var(Sound) float TransientSoundVolume; var(Sound) float TransientSoundRadius; // Sound slots for actors. enum ESoundSlot { SLOT_None, SLOT_Misc, SLOT_Pain, SLOT_Interact, SLOT_Ambient, SLOT_Talk, SLOT_Interface, }; // Music transitions. enum EMusicTransition { MTRAN_None, MTRAN_Instant, MTRAN_Segue, MTRAN_Fade, MTRAN_FastFade, MTRAN_SlowFade, }; //----------------------------------------------------------------------------- // Collision. // Collision size. var(Collision) const float CollisionRadius; // Radius of collision cyllinder. var(Collision) const float CollisionHeight; // Half-height cyllinder. // Collision flags. var(Collision) const bool bCollideActors; // Collides with other actors. var(Collision) bool bCollideWorld; // Collides with the world. var(Collision) bool bBlockActors; // Blocks other nonplayer actors. var(Collision) bool bBlockPlayers; // Blocks other player actors. var(Collision) bool bProjTarget; // Projectiles should potentially target this actor. //----------------------------------------------------------------------------- // Lighting. // Light modulation. var(Lighting) enum ELightType { LT_None, LT_Steady, LT_Pulse, LT_Blink, LT_Flicker, LT_Strobe, LT_BackdropLight, LT_SubtlePulse, LT_TexturePaletteOnce, LT_TexturePaletteLoop } LightType; // Spatial light effect to use. var(Lighting) enum ELightEffect { LE_None, LE_TorchWaver, LE_FireWaver, LE_WateryShimmer, LE_Searchlight, LE_SlowWave, LE_FastWave, LE_CloudCast, LE_StaticSpot, LE_Shock, LE_Disco, LE_Warp, LE_Spotlight, LE_NonIncidence, LE_Shell, LE_OmniBumpMap, LE_Interference, LE_Cylinder, LE_Rotor, LE_Unused } LightEffect; // Lighting info. var(LightColor) byte LightBrightness, LightHue, LightSaturation; // Light properties. var(Lighting) byte LightRadius, LightPeriod, LightPhase, LightCone, VolumeBrightness, VolumeRadius, VolumeFog; // Lighting. var(Lighting) bool bSpecialLit; // Only affects special-lit surfaces. var(Lighting) bool bActorShadows; // Light casts actor shadows. var(Lighting) bool bCorona; // Light uses Skin as a corona. var(Lighting) bool bLensFlare; // Whether to use zone lens flare. //----------------------------------------------------------------------------- // Physics. // Options. var(Movement) bool bBounce; // Bounces when hits ground fast. var(Movement) bool bFixedRotationDir; // Fixed direction of rotation. var(Movement) bool bRotateToDesired; // Rotate to DesiredRotation. var bool bInterpolating; // Performing interpolating. var const bool bJustTeleported; // Used by engine physics - not valid for scripts. // Dodge move direction. var enum EDodgeDir { DODGE_None, DODGE_Left, DODGE_Right, DODGE_Forward, DODGE_Back, DODGE_Active, DODGE_Done } DodgeDir; // Physics properties. var(Movement) float Mass; // Mass of this actor. var(Movement) float Buoyancy; // Water buoyancy. var(Movement) rotator RotationRate; // Change in rotation per second. var(Movement) rotator DesiredRotation; // Physics will rotate pawn to this if bRotateToDesired. var float PhysAlpha; // Interpolating position, 0.0-1.0. var float PhysRate; // Interpolation rate per second. var Actor PendingTouch; // Actor touched during move which wants to add an effect after the movement completes //----------------------------------------------------------------------------- // Animation. // Animation control. var float AnimLast; // Last frame. var float AnimMinRate; // Minimum rate for velocity-scaled animation. var float OldAnimRate; // Animation rate of previous animation (= AnimRate until animation completes). var plane SimAnim; // replicated to simulated proxies. // Blending Animation control - DEUS_EX CNN var float BlendAnimLast[4]; // Last frame. var float BlendAnimMinRate[4]; // Minimum rate for velocity-scaled animation. var float OldBlendAnimRate[4]; // Animation rate of previous animation (= AnimRate until animation completes). var plane SimBlendAnim[4]; // replicated to simulated proxies. // Conversation Related Variables - DEUS_EX AJY var(Conversation) String BindName; // Used to bind conversations var(Conversation) String BarkBindName; // Used to bind Barks! var(Conversation) localized String FamiliarName; // For display in Conversations var(Conversation) localized String UnfamiliarName; // For display in Conversations var transient Object ConListItems; // List of ConListItems for this Actor var travel float LastConEndTime; // Time when last conversation ended var(Conversation) float ConStartInterval; // Amount of time required between two convos. // Additional variables for AI - DEUS_EX STM var float VisUpdateTime; var float CurrentVisibility; var float LastVisibility; var(Smell) class<SmellNode> SmellClass; var SmellNode LastSmellNode; var(Advanced) bool bOwned; // End additional variables - DEUS_EX STM // DEUS_EX AMSD Added to make vision aug run faster. If true, the vision aug needs to check this object more closely. // Used for heat sources as well as things that blind. var bool bVisionImportant; //----------------------------------------------------------------------------- // Networking. // Network control. var(Networking) float NetPriority; // Higher priorities means update it more frequently. var(Networking) float NetUpdateFrequency; // How many seconds between net updates. var(Networking) float RelevantRadius; //Radius in which things are always relevant. // Symmetric network flags, valid during replication only. var const bool bNetInitial; // Initial network update. var const bool bNetOwner; // Player owns this actor. var const bool bNetRelevant; // Actor is currently relevant. Only valid server side, only when replicating variables. var const bool bNetSee; // Player sees it in network play. var const bool bNetHear; // Player hears it in network play. var const bool bNetFeel; // Player collides with/feels it in network play. var const bool bSimulatedPawn; // True if Pawn and simulated proxy. var const bool bDemoRecording; // True we are currently demo recording var const bool bClientDemoRecording;// True we are currently recording a client-side demo var const bool bClientDemoNetFunc;// True if we're client-side demo recording and this call originated from the remote. //----------------------------------------------------------------------------- // Enums. // Travelling from server to server. enum ETravelType { TRAVEL_Absolute, // Absolute URL. TRAVEL_Partial, // Partial (carry name, reset server). TRAVEL_Relative, // Relative URL. }; // Input system states. enum EInputAction { IST_None, // Not performing special input processing. IST_Press, // Handling a keypress or button press. IST_Hold, // Handling holding a key or button. IST_Release, // Handling a key or button release. IST_Axis, // Handling analog axis movement. }; // Input keys. enum EInputKey { /*00*/ IK_None ,IK_LeftMouse ,IK_RightMouse ,IK_Cancel , /*04*/ IK_MiddleMouse ,IK_Unknown05 ,IK_Unknown06 ,IK_Unknown07 , /*08*/ IK_Backspace ,IK_Tab ,IK_Unknown0A ,IK_Unknown0B , /*0C*/ IK_Unknown0C ,IK_Enter ,IK_Unknown0E ,IK_Unknown0F , /*10*/ IK_Shift ,IK_Ctrl ,IK_Alt ,IK_Pause , /*14*/ IK_CapsLock ,IK_Unknown15 ,IK_Unknown16 ,IK_Unknown17 , /*18*/ IK_Unknown18 ,IK_Unknown19 ,IK_Unknown1A ,IK_Escape , /*1C*/ IK_Unknown1C ,IK_Unknown1D ,IK_Unknown1E ,IK_Unknown1F , /*20*/ IK_Space ,IK_PageUp ,IK_PageDown ,IK_End , /*24*/ IK_Home ,IK_Left ,IK_Up ,IK_Right , /*28*/ IK_Down ,IK_Select ,IK_Print ,IK_Execute , /*2C*/ IK_PrintScrn ,IK_Insert ,IK_Delete ,IK_Help , /*30*/ IK_0 ,IK_1 ,IK_2 ,IK_3 , /*34*/ IK_4 ,IK_5 ,IK_6 ,IK_7 , /*38*/ IK_8 ,IK_9 ,IK_Unknown3A ,IK_Unknown3B , /*3C*/ IK_Unknown3C ,IK_Unknown3D ,IK_Unknown3E ,IK_Unknown3F , /*40*/ IK_Unknown40 ,IK_A ,IK_B ,IK_C , /*44*/ IK_D ,IK_E ,IK_F ,IK_G , /*48*/ IK_H ,IK_I ,IK_J ,IK_K , /*4C*/ IK_L ,IK_M ,IK_N ,IK_O , /*50*/ IK_P ,IK_Q ,IK_R ,IK_S , /*54*/ IK_T ,IK_U ,IK_V ,IK_W , /*58*/ IK_X ,IK_Y ,IK_Z ,IK_Unknown5B , /*5C*/ IK_Unknown5C ,IK_Unknown5D ,IK_Unknown5E ,IK_Unknown5F , /*60*/ IK_NumPad0 ,IK_NumPad1 ,IK_NumPad2 ,IK_NumPad3 , /*64*/ IK_NumPad4 ,IK_NumPad5 ,IK_NumPad6 ,IK_NumPad7 , /*68*/ IK_NumPad8 ,IK_NumPad9 ,IK_GreyStar ,IK_GreyPlus , /*6C*/ IK_Separator ,IK_GreyMinus ,IK_NumPadPeriod,IK_GreySlash , /*70*/ IK_F1 ,IK_F2 ,IK_F3 ,IK_F4 , /*74*/ IK_F5 ,IK_F6 ,IK_F7 ,IK_F8 , /*78*/ IK_F9 ,IK_F10 ,IK_F11 ,IK_F12 , /*7C*/ IK_F13 ,IK_F14 ,IK_F15 ,IK_F16 , /*80*/ IK_F17 ,IK_F18 ,IK_F19 ,IK_F20 , /*84*/ IK_F21 ,IK_F22 ,IK_F23 ,IK_F24 , /*88*/ IK_Unknown88 ,IK_Unknown89 ,IK_Unknown8A ,IK_Unknown8B , /*8C*/ IK_Unknown8C ,IK_Unknown8D ,IK_Unknown8E ,IK_Unknown8F , /*90*/ IK_NumLock ,IK_ScrollLock ,IK_Unknown92 ,IK_Unknown93 , /*94*/ IK_Unknown94 ,IK_Unknown95 ,IK_Unknown96 ,IK_Unknown97 , /*98*/ IK_Unknown98 ,IK_Unknown99 ,IK_Unknown9A ,IK_Unknown9B , /*9C*/ IK_Unknown9C ,IK_Unknown9D ,IK_Unknown9E ,IK_Unknown9F , /*A0*/ IK_LShift ,IK_RShift ,IK_LControl ,IK_RControl , /*A4*/ IK_UnknownA4 ,IK_UnknownA5 ,IK_UnknownA6 ,IK_UnknownA7 , /*A8*/ IK_UnknownA8 ,IK_UnknownA9 ,IK_UnknownAA ,IK_UnknownAB , /*AC*/ IK_UnknownAC ,IK_UnknownAD ,IK_UnknownAE ,IK_UnknownAF , /*B0*/ IK_UnknownB0 ,IK_UnknownB1 ,IK_UnknownB2 ,IK_UnknownB3 , /*B4*/ IK_UnknownB4 ,IK_UnknownB5 ,IK_UnknownB6 ,IK_UnknownB7 , /*B8*/ IK_UnknownB8 ,IK_UnknownB9 ,IK_Semicolon ,IK_Equals , /*BC*/ IK_Comma ,IK_Minus ,IK_Period ,IK_Slash , /*C0*/ IK_Tilde ,IK_UnknownC1 ,IK_UnknownC2 ,IK_UnknownC3 , /*C4*/ IK_UnknownC4 ,IK_UnknownC5 ,IK_UnknownC6 ,IK_UnknownC7 , /*C8*/ IK_Joy1 ,IK_Joy2 ,IK_Joy3 ,IK_Joy4 , /*CC*/ IK_Joy5 ,IK_Joy6 ,IK_Joy7 ,IK_Joy8 , /*D0*/ IK_Joy9 ,IK_Joy10 ,IK_Joy11 ,IK_Joy12 , /*D4*/ IK_Joy13 ,IK_Joy14 ,IK_Joy15 ,IK_Joy16 , /*D8*/ IK_UnknownD8 ,IK_UnknownD9 ,IK_UnknownDA ,IK_LeftBracket , /*DC*/ IK_Backslash ,IK_RightBracket,IK_SingleQuote ,IK_UnknownDF , /*E0*/ IK_JoyX ,IK_JoyY ,IK_JoyZ ,IK_JoyR , /*E4*/ IK_MouseX ,IK_MouseY ,IK_MouseZ ,IK_MouseW , /*E8*/ IK_JoyU ,IK_JoyV ,IK_UnknownEA ,IK_UnknownEB , /*EC*/ IK_MouseWheelUp ,IK_MouseWheelDown,IK_Unknown10E,UK_Unknown10F , /*F0*/ IK_JoyPovUp ,IK_JoyPovDown ,IK_JoyPovLeft ,IK_JoyPovRight , /*F4*/ IK_UnknownF4 ,IK_UnknownF5 ,IK_Attn ,IK_CrSel , /*F8*/ IK_ExSel ,IK_ErEof ,IK_Play ,IK_Zoom , /*FC*/ IK_NoName ,IK_PA1 ,IK_OEMClear }; var(Display) class<RenderIterator> RenderIteratorClass; // class to instantiate as the actor's RenderInterface var transient RenderIterator RenderInterface; // abstract iterator initialized in the Rendering engine","title":"Properties"},{"location":"actor/#network-replication","text":"replication { // Relationships. unreliable if( Role==ROLE_Authority ) Owner, Role, RemoteRole; unreliable if( bNetOwner && Role==ROLE_Authority ) bNetOwner, Inventory; unreliable if( bReplicateInstigator && (RemoteRole>=ROLE_SimulatedProxy) && (Role==ROLE_Authority) ) Instigator; // Ambient sound. unreliable if( (Role==ROLE_Authority) && (!bNetOwner || !bClientAnim) ) AmbientSound; unreliable if( AmbientSound!=None && Role==ROLE_Authority && (!bNetOwner || !bClientAnim) ) SoundRadius, SoundVolume, SoundPitch; unreliable if( bDemoRecording ) DemoPlaySound; // Collision. unreliable if( Role==ROLE_Authority ) bCollideActors, bCollideWorld; unreliable if( (bCollideActors || bCollideWorld) && Role==ROLE_Authority ) bProjTarget, bBlockActors, bBlockPlayers, CollisionRadius, CollisionHeight; // Location. unreliable if( !bCarriedItem && (bNetInitial || bSimulatedPawn || RemoteRole<ROLE_SimulatedProxy) && Role==ROLE_Authority ) Location; unreliable if( !bCarriedItem && (DrawType==DT_Mesh || DrawType==DT_Brush) && (bNetInitial || bSimulatedPawn || RemoteRole<ROLE_SimulatedProxy) && Role==ROLE_Authority ) Rotation; unreliable if( RemoteRole==ROLE_SimulatedProxy ) Base; // Events unreliable if( Role==ROLE_authority) Event, Tag; // Velocity. unreliable if( bSimFall || ((RemoteRole==ROLE_SimulatedProxy && (bNetInitial || bSimulatedPawn)) || bIsMover) ) Velocity; // Physics. unreliable if( bSimFall || (RemoteRole==ROLE_SimulatedProxy && bNetInitial && !bSimulatedPawn) ) Physics, Acceleration, bBounce; unreliable if( RemoteRole==ROLE_SimulatedProxy && Physics==PHYS_Rotating && bNetInitial ) bFixedRotationDir, bRotateToDesired, RotationRate, DesiredRotation; // Animation. unreliable if( DrawType==DT_Mesh && ((RemoteRole<=ROLE_SimulatedProxy && (!bNetOwner || !bClientAnim)) || bDemoRecording) ) AnimSequence, BlendAnimSequence; // blended anims added - DEUS_EX CNN unreliable if( DrawType==DT_Mesh && (RemoteRole==ROLE_SimulatedProxy)) bAnimNotify; unreliable if( DrawType==DT_Mesh && (RemoteRole<ROLE_SimulatedProxy)) SimAnim, AnimMinRate, SimBlendAnim, BlendAnimMinRate; // blended anims added - DEUS_EX CNN // Rendering. unreliable if( Role==ROLE_Authority ) bHidden, bOnlyOwnerSee; unreliable if( Role==ROLE_Authority ) Texture, DrawScale, PrePivot, DrawType, AmbientGlow, Fatness, ScaleGlow, bUnlit, Style; unreliable if( DrawType==DT_Sprite && !bHidden && (!bOnlyOwnerSee || bNetOwner) && Role==ROLE_Authority) Sprite; unreliable if( DrawType==DT_Mesh && Role==ROLE_Authority ) Mesh, bMeshEnviroMap, Skin, MultiSkins; unreliable if( DrawType==DT_Brush && Role==ROLE_Authority ) Brush; // Lighting. unreliable if( Role==ROLE_Authority ) LightType; unreliable if( LightType!=LT_None && Role==ROLE_Authority ) LightEffect, LightBrightness, LightHue, LightSaturation, LightRadius, LightPeriod, LightPhase, VolumeBrightness, VolumeRadius, bSpecialLit; // Messages reliable if( Role<ROLE_Authority ) BroadcastMessage, BroadcastLocalizedMessage; }","title":"Network replication"},{"location":"actor/#functions","text":"","title":"Functions"},{"location":"actor/#consolecommand","text":"Execute a console command in the context of the current level and game engine. native function string ConsoleCommand( string Command );","title":"ConsoleCommand"},{"location":"actor/#error","text":"Actor error handling. Handle an error and kill this one actor. native(233) final function Error( coerce string S );","title":"Error"},{"location":"actor/#sleep","text":"native(256) final latent function Sleep( float Seconds );","title":"Sleep"},{"location":"actor/#collision","text":"native(262) final function SetCollision( optional bool NewColActors, optional bool NewBlockActors, optional bool NewBlockPlayers ); native(283) final function bool SetCollisionSize( float NewRadius, float NewHeight );","title":"Collision"},{"location":"actor/#movement","text":"native(266) final function bool Move( vector Delta ); native(267) final function bool SetLocation( vector NewLocation ); native(299) final function bool SetRotation( rotator NewRotation ); native(3969) final function bool MoveSmooth( vector Delta ); native(3971) final function AutonomousPhysics(float DeltaSeconds);","title":"Movement"},{"location":"actor/#relations","text":"native(298) final function SetBase( actor NewBase ); native(272) final function SetOwner( actor NewOwner );","title":"Relations"},{"location":"actor/#ai-functions","text":"added DEUS_EX STM native(700) final function float AIGetLightLevel( vector Location ); native(701) final function float AIVisibility(optional bool bIncludeVelocity); native(710) final function AISetEventCallback(name eventName, name callback, optional name scoreCallback, optional bool bCheckVisibility, optional bool bCheckDir, optional bool bCheckCylinder, optional bool bCheckLOS); native(711) final function AIClearEventCallback(name eventName); native(713) final function AISendEvent(name eventName, EAIEventType eventType, optional float Value, optional float Radius); native(714) final function AIStartEvent(name eventName, EAIEventType eventType, optional float Value, optional float Radius); native(715) final function AIEndEvent(name eventName, EAIEventType eventType); native(716) final function AIClearEvent(name eventName); native(717) final function rotator RandomBiasedRotation(int centralYaw, float yawDistribution, int centralPitch, float pitchDistribution); native(718) final function bool IsOverlapping(actor checkActor); native(720) final function PlayerPawn GetPlayerPawn(); native(721) final function bool InStasis(); native(722) final function float ParabolicTrace(out vector finalLocation, optional vector startVelocity, optional vector startLocation, optional bool bCheckActors, optional vector cylinder, optional float maxTime, optional float elasticity, optional bool bBounce, optional float landingSpeed, optional float granularity); native(723) final function float LastRendered(); native(724) final function bool GetBoundingBox(out vector MinVect, out vector MaxVect, optional bool bExact, optional vector testLocation, optional rotator testRotation);","title":"AI Functions"},{"location":"actor/#animation","text":"native(259) final function PlayAnim( name Sequence, optional float Rate, optional float TweenTime ); native(260) final function LoopAnim( name Sequence, optional float Rate, optional float TweenTime, optional float MinRate ); native(294) final function TweenAnim( name Sequence, float Time ); native(282) final function bool IsAnimating(); native(293) final function name GetAnimGroup( name Sequence ); native(261) final latent function FinishAnim(); native(263) final function bool HasAnim( name Sequence ); // Blending animation function - DEUS_EX CNN native(1010) final function PlayBlendAnim( name Sequence, optional float Rate, optional float TweenTime, optional int BlendSlot ); native(1012) final function TweenBlendAnim( name Sequence, float Time, optional int BlendSlot ); // Gets any numbered texture from a mesh - DEUS_EX CNN native(1013) final function Texture GetMeshTexture( optional int texnum ); // Animation notifications. event AnimEnd();","title":"Animation"},{"location":"actor/#physics","text":"// Physics control. native(301) final latent function FinishInterpolation(); // DEUS_EX STM - added optional param to SetPhysics() //native(3970) final function SetPhysics( EPhysics newPhysics ); native(3970) final function SetPhysics( EPhysics newPhysics, optional Actor newFloor );","title":"Physics"},{"location":"actor/#engine-notification-functions","text":"","title":"Engine notification functions"},{"location":"actor/#major-notifications","text":"","title":"Major notifications"},{"location":"actor/#spawned","text":"event Spawned(); Called when actor is Spawned. See also PostBeginPlay , BeginPlay , PreBeginPlay , PostPostBeginPlay .","title":"Spawned"},{"location":"actor/#destroyed","text":"event Destroyed(); Called when actor is destroyed and removed from the game.","title":"Destroyed"},{"location":"actor/#expired","text":"event Expired(); Unknown.","title":"Expired"},{"location":"actor/#children","text":"event GainedChild( Actor Other ); event LostChild( Actor Other ); Called when actor gains/looses a child actor.","title":"Children"},{"location":"actor/#tick","text":"event Tick( float DeltaTime ); Called every tick, or frame, of the game.","title":"Tick"},{"location":"actor/#triggers","text":"event Trigger( Actor Other, Pawn EventInstigator ); Called when actor is 'Triggered' by the Trigger function. event UnTrigger( Actor Other, Pawn EventInstigator ); Called when actor de-activates, e.i. triggered again to turn off. event BeginEvent(); event EndEvent(); Unknown effects.","title":"Triggers"},{"location":"actor/#physics-world-interaction","text":"","title":"Physics &amp; world interaction."},{"location":"actor/#timer","text":"event Timer(); Called when SetTimer() expires. (See SetTimer )","title":"Timer"},{"location":"actor/#hitwall","text":"event HitWall( vector HitNormal, actor HitWall ); Called when object hits the wall. HitNormal : The vector direction that the actor hit from. HitWall : The wall being hit.","title":"HitWall"},{"location":"actor/#falling","text":"event Falling(); Called when actor is falling through the air.","title":"Falling"},{"location":"actor/#landed","text":"event Landed( vector HitNormal ); Called when actor hits the ground. HitNormal : Firection actor landed from","title":"Landed"},{"location":"actor/#zonechange","text":"event ZoneChange( ZoneInfo NewZone ); Called when actor changes between Zones in the world. NewZone : The ZoneInfo actor controlling the entered zone.","title":"ZoneChange"},{"location":"actor/#bumptouch","text":"event Bump( Actor Other ); event Touch( Actor Other ); Called when actor hits in to another actor physically. Other : The actor being touched. event PostTouch( Actor Other ); event UnTouch( Actor Other ); Called for PendingTouch actor after physics completes.","title":"Bump/Touch"},{"location":"actor/#basechange","text":"event BaseChange(); Called when actor changes base, meaning the actor that is supporting this one. For example, players standing on a crate, and then standing on the floor, is a BaseChange.","title":"BaseChange"},{"location":"actor/#attachment","text":"event Attach( Actor Other ); event Detach( Actor Other ); Used for attaching and detaching actors from another. Mostly used for making buttons and switches follow elevators.","title":"Attachment"},{"location":"actor/#killcredit","text":"event KillCredit( Actor Other ); Called when something is killed. Other : Actor being credited for a kill.","title":"KillCredit"},{"location":"actor/#interpolating","text":"event InterpolateEnd( actor Other ); Called when actor finishes its interpolating path.","title":"Interpolating"},{"location":"actor/#endedrotation","text":"event EndedRotation(); Called when actor stops rotating.","title":"EndedRotation"},{"location":"actor/#others","text":"event Actor SpecialHandling(Pawn Other); event bool EncroachingOn( actor Other ); event EncroachedBy( actor Other ); DEUS_EX STM -- added","title":"Others"},{"location":"actor/#bumpwall","text":"event BumpWall( vector HitLocation, vector HitNormal ); Called when actor hits the wall. HitLocation : The location of the wall being hit. HitNormal : The direction being hit from.","title":"BumpWall"},{"location":"actor/#supportactor","text":"event SupportActor( actor StandingActor ) { StandingActor.SetBase( self ); } Called when actor is being stood on.","title":"SupportActor"},{"location":"actor/#outofworld","text":"event FellOutOfWorld() { SetPhysics(PHYS_None); Destroy(); } Called when actor falls out of the world, e.g. fell through the geometry and no longer is in the normal play area.","title":"OutOfWorld"},{"location":"actor/#damage-and-kills","text":"event KilledBy( pawn EventInstigator ); Called when actor is killed. EventInstigator : The pawn that killed this actor. event TakeDamage( int Damage, Pawn EventInstigator, vector HitLocation, vector Momentum, name DamageType); Called when the actor takes any damage. Damage : The raw damage being dealt to this actor. EventInstigator : The pawn dealing the damage. HitLocation : The location this actor was hit at. Momentum : The direction this actor will be pushed in. DamageType : The string damage type being dealt.","title":"Damage and kills"},{"location":"actor/#tracing","text":"","title":"Tracing"},{"location":"actor/#trace","text":"native(277) final function Actor Trace ( out vector HitLocation, out vector HitNormal, vector TraceEnd, optional vector TraceStart, optional bool bTraceActors, optional vector Extent ); Traces a line and see what it collides with first. Takes this actor's collision properties into account. Returns first hit actor, Level if hit level, or None if hit nothing. HitLocation : The location we've hit. ( out means the variable is usable after the function is called) HitNormal : Not sure. (WIP) TraceEnd : Where we want to trace to. TraceStart : Where the trace starts from. Uses <actor>.location if left out. bTraceActors : Where we collide with actors or not. Extent : The range of the trace (?)","title":"Trace"},{"location":"actor/#fasttrace","text":"native(548) final function bool FastTrace ( vector TraceEnd, optional vector TraceStart ); returns true if did not hit world geometry TraceEnd : Where we want to trace to. TraceStart : Where the trace starts from. Uses <actor>.location if left out.","title":"FastTrace"},{"location":"actor/#spawn","text":"native(278) final function actor Spawn ( class<actor> SpawnClass, optional actor SpawnOwner, optional name SpawnTag, optional vector SpawnLocation, optional rotator SpawnRotation ); Spawn an actor. Returns an actor of the specified class, not of class Actor (this is hardcoded in the compiler). Returns None if the actor could not be spawned (either the actor wouldn't fit in the specified location, or the actor list is full). Defaults to spawning at the spawner's location. SpawnClass : The class we want to spawn. Example: class'DeusEx.Medkit' SpawnOwner : The actor that owns the newly spawned actor. SpawnTag : Sets the Tag of the new actor. SpawnLocation : Location to spawn at. Uses <actor>.location if left out. SpawnRotation : Rocation to spawn at. Uses <actor>.rotation if left out.","title":"Spawn"},{"location":"actor/#destroy","text":"native(279) final function bool Destroy(); Destroy this actor. Returns true if destroyed, false if indestructable. Destruction is latent. It occurs at the end of the tick.","title":"Destroy"},{"location":"actor/#timer_1","text":"native(280) final function SetTimer( float NewTimerRate, bool bLoop ); Triggers the Timer() event after NewTimerRate ticks. If bLoop is True then then timer will continue looping, else only triggers once.","title":"Timer"},{"location":"actor/#sound","text":"","title":"Sound"},{"location":"actor/#playsound","text":"native(264) final function int PlaySound ( sound Sound, optional ESoundSlot Slot, optional float Volume, optional bool bNoOverride, optional float Radius, optional float Pitch ); //Same as PlaySound, but only plays for the client. (No server propogation) native simulated final function PlayOwnedSound(); //PlaySound call used for Demorec system. native simulated event DemoPlaySound(); Play a sound effect. *DEUS_EX - CNN* changed to return the channel ID of the sound so you can call StopSound later Sound : A sound class in the game. Example: sound'LogNoteAdded' ESoundSlot : The slot to play the sound in to. See ESoundSlot variable. Volume : Volume of the sound. bNoOverride : Wether this sound can be overwritten with other sounds on the same slot or not. Radius : Physical hearable radius of the sound. Pitch : Sounds pitch modifier.","title":"PlaySound"},{"location":"actor/#stopsound","text":"native(265) final function StopSound(int Id); DEUS_EX CNN - Stop a sound given the sound's ID","title":"StopSound"},{"location":"actor/#setinstantvolume","text":"native(268) final function SetInstantSoundVolume(byte newSoundVolume); native(269) final function SetInstantSpeechVolume(byte newSpeechVolume); native(270) final function SetInstantMusicVolume(byte newMusicVolume); DEUS_EX CNN - Set the sound system volumes without waiting for a tick event","title":"SetInstantVolume"},{"location":"actor/#getsoundduration","text":"native final function float GetSoundDuration( sound Sound ); Get a sound duration.","title":"GetSoundDuration"},{"location":"actor/#ai-functions_1","text":"","title":"AI functions."},{"location":"actor/#makenoise","text":"native(512) final function MakeNoise( float Loudness ); Inform other creatures that you've made a noise they might hear (they are sent a HearNoise message) Senders of MakeNoise should have an instigator if they are not pawns.","title":"MakeNoise"},{"location":"actor/#playercanseeme","text":"native(532) final function bool PlayerCanSeeMe(); Returns true if some player has a line of sight to actor's location.","title":"PlayerCanSeeMe"},{"location":"actor/#teleportation","text":"event bool PreTeleport( Teleporter InTeleporter ); Called before actor teleports using a Teleporter actor. event PostTeleport( Teleporter OutTeleporter ); Called after actor teleports using a Teleporter actor.","title":"Teleportation"},{"location":"actor/#beginplay","text":"event BeginPlay(); Called when actor enters the game. event PostBeginPlay(); Called immediately after gameplay begins. event PostPostBeginPlay(); DEUS_EX AJY Called immediately after Initial State, and always called when loading a map AND when loading savegame simulated event SetInitialState() { if( InitialState!='' ) GotoState( InitialState ); else GotoState( 'Auto' ); } Called after PostBeginPlay. simulated event PostNetBeginPlay(); MBCODE Called after a net game begins. event PreBeginPlay() { // fake shrink to fix faked collision with floor problems - DEUS_EX CNN if ((IsA('Decoration') || IsA('Inventory')) && (CollisionHeight > 0.75)) SetCollisionSize(CollisionRadius, CollisionHeight - 0.75); else if (IsA('Pawn')) { if (CollisionHeight > 9) SetCollisionSize(CollisionRadius, CollisionHeight - 4.5); else SetCollisionSize(CollisionRadius, CollisionHeight*0.5); } // Handle autodestruction if desired. if( !bGameRelevant && (Level.NetMode != NM_Client) && !Level.Game.IsRelevant(Self) ) Destroy(); } Called immediately before gameplay begins.","title":"BeginPlay"},{"location":"actor/#disk-access","text":"// Find files. native(539) final function string GetMapName( string NameEnding, string MapName, int Dir ); native(545) final function GetNextSkin( string Prefix, string CurrentSkin, int Dir, out string SkinName, out string SkinDesc ); native(547) final function string GetURLMap(); native final function string GetNextInt( string ClassName, int Num ); native final function GetNextIntDesc( string ClassName, int Num, out string Entry, out string Description );","title":"Disk access."},{"location":"actor/#iterator-functions","text":"native(304) final iterator function AllActors ( class<actor> BaseClass, out actor Actor, optional name MatchTag ); native(305) final iterator function ChildActors ( class<actor> BaseClass, out actor Actor ); native(306) final iterator function BasedActors ( class<actor> BaseClass, out actor Actor ); native(307) final iterator function TouchingActors( class<actor> BaseClass, out actor Actor ); native(309) final iterator function TraceActors ( class<actor> BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm, vector End, optional vector Start, optional vector Extent ); native(310) final iterator function RadiusActors ( class<actor> BaseClass, out actor Actor, float Radius, optional vector Loc ); native(311) final iterator function VisibleActors ( class<actor> BaseClass, out actor Actor, optional float Radius, optional vector Loc ); native(312) final iterator function VisibleCollidingActors ( class<actor> BaseClass, out actor Actor, optional float Radius, optional vector Loc, optional bool bIgnoreHidden ); // added by DEUS_EX CNN native(1000) final iterator function TraceTexture (class<actor> BaseClass, out actor Actor, out name texName, out name texGroup, out int flags, out vector HitLoc, out vector HitNorm, vector End, optional vector Start, optional vector Extent); // added by DEUS_EX STM native(1002) final iterator function CycleActors (class<actor> BaseClass, out actor Actor, out int Index ); native(1003) final iterator function TraceVisibleActors(class<actor> BaseClass, out actor Actor, out vector HitLoc, out vector HitNorm, vector End, optional vector Start, optional vector Extent ); Iterators are used in the format of; //Destroy all medkits local Medkit MD; foreach AllActors(class'DeusEx.Medkit', MD) MD.Destroy()","title":"Iterator functions."},{"location":"actor/#color-operators","text":"native(549) static final operator(20) color - ( color A, color B ); native(550) static final operator(16) color * ( float A, color B ); native(551) static final operator(20) color + ( color A, color B ); native(552) static final operator(16) color * ( color A, float B );","title":"Color operators"},{"location":"actor/#scripted-actor-functions","text":"event RenderOverlays( canvas Canvas ); draw on canvas before flash and fog are applied (used for drawing weapons)","title":"Scripted Actor functions"},{"location":"actor/#broadcastmessage","text":"event BroadcastMessage( coerce string Msg, optional bool bBeep, optional name Type ) { local Pawn P; if (Type == '') Type = 'Event'; // if ( Level.Game.AllowsBroadcast(self, Len(Msg)) ) for( P=Level.PawnList; P!=None; P=P.nextPawn ) if( P.bIsPlayer || P.IsA('MessagingSpectator') ) P.ClientMessage( Msg, Type, bBeep ); } Broadcast a message to all players. Can be called as a function; BroadcastMessage(\"This is seen by everyone.\") bBeep : Defines if the message triggers a chat message beep. (Maybe doesn't work?) Type : Unsure. event BroadcastLocalizedMessage( class<LocalMessage> Message, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject ) { local Pawn P; for ( P=Level.PawnList; P != None; P=P.nextPawn ) if ( P.bIsPlayer || P.IsA('MessagingSpectator') ) P.ReceiveLocalizedMessage( Message, Switch, RelatedPRI_1, RelatedPRI_2, OptionalObject ); } Broadcast a localized message to all players. Most message deal with 0 to 2 related PRIs. The LocalMessage class defines how the PRI's and optional actor are used.","title":"BroadcastMessage"},{"location":"actor/#hurtradius","text":"final function HurtRadius( float DamageAmount, float DamageRadius, name DamageName, float Momentum, vector HitLocation, optional bool bIgnoreLOS ) { local actor Victims; local float damageScale, dist; local vector dir; // DEUS_EX CNN local Mover M; if( bHurtEntry ) return; bHurtEntry = true; if (!bIgnoreLOS) { foreach VisibleCollidingActors( class 'Actor', Victims, DamageRadius, HitLocation ) { if( Victims != self ) { dir = Victims.Location - HitLocation; dist = FMax(1,VSize(dir)); dir = dir/dist; damageScale = 1 - FMax(0,(dist - Victims.CollisionRadius)/DamageRadius); Victims.TakeDamage ( damageScale * DamageAmount, Instigator, Victims.Location - 0.5 * (Victims.CollisionHeight + Victims.CollisionRadius) * dir, (damageScale * Momentum * dir), DamageName ); } } } else { foreach RadiusActors(class 'Actor', Victims, DamageRadius, HitLocation ) { if( Victims != self ) { dir = Victims.Location - HitLocation; dist = FMax(1,VSize(dir)); dir = dir/dist; damageScale = 1 - FMax(0,(dist - Victims.CollisionRadius)/DamageRadius); Victims.TakeDamage ( damageScale * DamageAmount, Instigator, Victims.Location - 0.5 * (Victims.CollisionHeight + Victims.CollisionRadius) * dir, (damageScale * Momentum * dir), DamageName ); } } } // // DEUS_EX - CNN - damage the movers, also // foreach RadiusActors(class 'Mover', M, DamageRadius, HitLocation) { if( M != self ) { dir = M.Location - HitLocation; dist = FMax(1,VSize(dir)); dir = dir/dist; damageScale = 1 - FMax(0,(dist - M.CollisionRadius)/DamageRadius); M.TakeDamage ( damageScale * DamageAmount, Instigator, M.Location - 0.5 * (M.CollisionHeight + M.CollisionRadius) * dir, (damageScale * Momentum * dir), DamageName ); } } bHurtEntry = false; } Hurt actors within the radius. DamageAmount : Damage done to the actors. DamageRadius : Range of actors to damage. DamageName : Name of the damage. Momentum : Vector to push the damaged actor in. HitLocation : Location to deal the damage to. Only relevant for Pawn actors to damage body parts. bIgnoreLOS : Unsure.","title":"HurtRadius"},{"location":"actor/#travel","text":"event TravelPreAccept(); Called when carried onto a new level, before AcceptInventory. event TravelPostAccept(); Called when carried into a new level, after AcceptInventory.","title":"Travel"},{"location":"actor/#frob","text":"function Frob(Actor Frobber, Inventory frobWith) { } DEUS_EX CNN Called to frob an object, the subclass is responsible for implementing this Frobber will be the actor frobbing this actor. frobWith : Unsure.","title":"Frob"},{"location":"actor/#stopblendanims","text":"function StopBlendAnims() { local int i; for (i=0; i<ArrayCount(BlendAnimSequence); i++) BlendAnimSequence[i] = ''; } DEUS_EX CNN Stops animations from blending","title":"StopBlendAnims"},{"location":"actor/#rendertexture","text":"event RenderTexture(ScriptedTexture Tex); Called when a scripted texture needs rendering","title":"RenderTexture"},{"location":"actor/#becomeviewtarget","text":"function BecomeViewTarget(); Called by PlayerPawn when this actor becomes its ViewTarget.","title":"BecomeViewTarget"},{"location":"actor/#getitemname","text":"function String GetItemName( string FullName ) { local int pos; pos = InStr(FullName, \".\"); While ( pos != -1 ) { FullName = Right(FullName, Len(FullName) - pos - 1); pos = InStr(FullName, \".\"); } return FullName; } Returns the string representation of the name of an object without the package prefixes.","title":"GetItemName"},{"location":"actor/#gethumanname","text":"function String GetHumanName() { return GetItemName(string(class)); } Returns the human readable string representation of an object.","title":"GetHumanName"},{"location":"actor/#setdisplayproperties","text":"function SetDisplayProperties(ERenderStyle NewStyle, texture NewTexture, bool bLighting, bool bEnviroMap ) { Style = NewStyle; texture = NewTexture; bUnlit = bLighting; bMeshEnviromap = bEnviromap; } function SetDefaultDisplayProperties() { Style = Default.Style; texture = Default.Texture; bUnlit = Default.bUnlit; bMeshEnviromap = Default.bMeshEnviromap; } Set the display properties of an actor. By setting them through this function, it allows the actor to modify other components (such as a Pawn's weapon) or to adjust the result based on other factors (such as a Pawn's other inventory wanting to affect the result)","title":"SetDisplayProperties"},{"location":"actor/#endconversation","text":"function EndConversation() { LastConEndTime = Level.TimeSeconds; } Save the time this conversation ended DEUS_EX AJY","title":"EndConversation"},{"location":"actor/#defaultproperties","text":"defaultproperties { bMovable=True bDetectable=True Role=ROLE_Authority RemoteRole=ROLE_DumbProxy LastRenderTime=-10.000000 LODBias=1.000000 bDifficulty0=True bDifficulty1=True bDifficulty2=True bDifficulty3=True bSinglePlayer=True bNet=True bNetSpecial=True OddsOfAppearing=1.000000 DrawType=DT_Sprite Style=STY_Normal Texture=Texture'Engine.S_Actor' DrawScale=1.000000 ScaleGlow=1.000000 Fatness=128 SoundRadius=32 SoundVolume=128 SoundPitch=64 TransientSoundVolume=1.000000 CollisionRadius=22.000000 CollisionHeight=22.000000 bJustTeleported=True Mass=100.000000 ConStartInterval=5.000000 NetPriority=1.000000 NetUpdateFrequency=100.000000 }","title":"DefaultProperties"},{"location":"coding/","text":"Intro First off, setting up files; For editing code , you can either use Notepad (windows) or the Linux equivelant (Gedit usually), it works. But the alternative is Notepad++ and the USCRIPT syntax highlighting, which colours in the code to make it easier to understand, and also will be helpful for a few other aspects. Download Notepad++ and Language File for Uscript (Right click and save-as to avoid it opening in-browser) For Windows, install as normal. For Linux, run the installer under Wine. Once done and loaded, in Language drop down box, click User defined language and click Import, and select the .xml file. Save that and now any .uc files should load with the syntax highlighting. Another alternative for Linux is the Geany IDE , which basically feels like a native N++ for Linux. It is also available on Windows. For compiling code , install the SDK through whatever means you want. I recommend either Deus Ex Editing Pack 2.2 or Deus Ex Unreal Ed updated Installer. Same install instructions as Notepad++. Editing Pack includes a collection of software used for editing, most unneeded, but still handy. In the end, you should end up with a file in Deus Ex/System/ called ucc.exe. If thats there, its installed, and thats all we need. If you want a good base to start off, open up the SDK/Unreal Ed, and in the Classes browser, just click Export All. This decompiles the entire game source code in to the Deus Ex/ folder. If you have code you already want to compile, first, think of a name for the package, example MyMod , but maybe something more clever. Create a folder in Deus Ex directory called MyMod (or whatever you want to call it). Inside THAT, create a folder called Classes . Inside THAT, put your .uc files. Open DeusEx.ini file, search for the list of EditPackages, and at the bottom of that list, add your own, E.g. EditPackages=MyMod This next part varies based on setups, but the end goal is to have the command line of your OS directed to Deus Ex/System. Windows 7+ : Shift-Right Click the background of the System folder with no files selected, and click Open Command Line Here. Windows XP and earlier : Run > cmd.exe, and enter cd followed by the path to your DX system, e.g. cd C:/Deus Ex/System/ Linux : Theres many ways, the XP way works using the Terminal, but in the Thunar file editor, theres an option in the drop down box to Open Terminal Here. Once you're there, enter ucc make It'll attempt to compile the list, if the .u files exist, it'll skip it, so it'll ignore all the default DX files, and attempt your custom file. Useful Functions Replicated Exec (How to remotely execute commands on players) replication { //Replicating the function so it executes on the client, not the server reliable if (Role == ROLE_Authority) ReplExec; } //Replicated Exec simulated function ReplExec(DeusExPlayer Player, string Command) { SetOwner(Player); Player.ConsoleCommand(Command); SetOwner(self); } String Splitting //Split - based on Python, by Kaiser //Takes the Original string, and returns the string found between LeftCut and RightCut, optionally having offsets on either side //Examples: //str = <message>!blah!</message> - Split(str, \"<message>\", \"</message>\") returns !blah! //str = <message>!blah!</message> - Split(str, \"<message>\", \"</message>\", 1, -1) returns blah function string Split(string Original, string LeftCut, string RightCut, optional int OffsetLeft, optional int OffsetRight) { local int leftline, rightline; leftline = InStr(Original, LeftCut); leftline += Len(LeftCut); leftline += OffsetLeft; rightline = InStr(Original, RightCut); rightline += OffsetRight; return Mid(Original, leftline, rightline-leftline); } String Replacing //Repl - based on Unreal 2 function, backported by Kaiser //Takes the Original string, returns the string with every instance of Target replaced with ReplaceWith //Example: str = \"one two four\" - Repl(str, \"four\", \"three\") returns \"one two three\" function string Repl(string Original, string Target, string ReplaceWith) { local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString; OutMessage=Original; while (instr(caps(outmessage), Target) != -1) { tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), Target))-Len(Target))); tempLeft=(left(OutMessage, instr(caps(OutMessage), Target)) ); OutMessage=TempLeft$ReplaceWith$TempRight; } return OutMessage; } Getting some player variables //Player variable functions //Gives you a readable name of whatever is inputted ~Kaiser function string GetReadableName(Actor A) { if(DeusExDecoration(A) != None) return DeusExDecoration(A).itemName; else if(Inventory(A) != None) return Inventory(A).itemName; else if(ScriptedPawn(A) != None) return ScriptedPawn(A).FamiliarName; else if(DeusExPlayer(A) != None) return DeusExPlayer(A).PlayerReplicationInfo.PlayerName; else if(DeusExMover(A) != None) return string(DeusExMover(A).Tag); else return \"\"; } //Quickly gives the name of the current pawn function string GetName(PlayerPawn P) { if(P != None) return P.PlayerReplicationInfo.PlayerName; else return \"[No player found]\"; } function string GetNameFromID(int id) { local PlayerPawn P; foreach AllActors(class'PlayerPawn', P) if(P.PlayerReplicationInfo.PlayerID == i) return P.PlayerReplicationInfo.PlayerName; } function string GetIDFromName(string playername) { local PlayerPawn P; foreach AllActors(class'PlayerPawn', P) if(instr(caps(P.PlayerReplicationInfo.PlayerName), caps(str)) != -1) return P.PlayerReplicationInfo.PlayerID; } function int GetID(PlayerPawn P) { if(P != None) return P.PlayerReplicationInfo.PlayerID; else return -1; } function string GetIP(PlayerPawn P) { local string IP; if(P != None) { IP = P.GetPlayerNetworkAddress(); IP = Left(IP,InStr(IP,\":\")); return IP; } else return \"[No player found]\"; } function PlayerPawn GetPlayerFromID(int i) { local PlayerPawn P; foreach AllActors(class'PlayerPawn', P) if(P.PlayerReplicationInfo.PlayerID == i) return P; } function PlayerPawn GetPlayerFromName(string str) { local PlayerPawn P; foreach AllActors(class'PlayerPawn', P) if(instr(caps(P.PlayerReplicationInfo.PlayerName), caps(str)) != -1) return P; } Date/time function string GetDate() { return level.day$\"/\"$level.month$\"/\"$level.year; } function string GetTime() { local string formattedmin; //We do this part here because of how int's are zeroed. //By default if we just take the level.minute as our time, //a time like \"11:09\" would show as \"11:9\", not so good, //this section inserts the 0 when needed. if(level.minute <= 9) { formattedmin = \"0\"$level.minute; } else { formattedmin = string(level.minute); } return level.hour$\":\"$formattedmin; } Laser/Scope keys This hopes to teach a little about how to make your own cool functions out of the Ammo Switching, Scope, and Laser Sight functions. First off, identifying the functions that'll be needed to be changed to edit the functionality of these functions. First off: Scope. ScopeOn(); ScopeOff(); ScopeToggle(); and their codes are: function ScopeOn() { if (bHasScope &amp;&amp; !bZoomed &amp;&amp; (Owner != None) &amp;&amp; Owner.IsA('DeusExPlayer')) { // Show the Scope View bZoomed = True; RefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed); } } function ScopeOff() { if (bHasScope &amp;&amp; bZoomed &amp;&amp; (Owner != None) &amp;&amp; Owner.IsA('DeusExPlayer')) { bZoomed = False; // Hide the Scope View RefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed); //DeusExRootWindow(DeusExPlayer(Owner).rootWindow).scopeView.DeactivateView(); } } simulated function ScopeToggle() { if (IsInState('Idle')) { if (bHasScope &amp;&amp; (Owner != None) &amp;&amp; Owner.IsA('DeusExPlayer')) { if (bZoomed) ScopeOff(); else ScopeOn(); } } } However, you don't want a boring old scope button thingy, do you? No? Well then, hang about. I'm going to show you how to get it to do something intresting... ;-) First, we strip out as much crap as possible.. function ScopeOn() { } function ScopeOff() { } simulated function ScopeToggle() { if (bHasScope) { if (bZoomed) ScopeOff(); else ScopeOn(); } } Right, that's gotten rid of everything that the original scope needs. (Note, this'll mean you can no longer use a scope, so make something decent to replace it...) Now, to make it do something cool. Hmm... ideas ideas ideas... Well, I suppose summoning a Plasma Bolt will have to do. I can't think of anything better. function ScopeOn() { Spawn(class'PlasmaBolt',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation); } function ScopeOff() { Spawn(class'PlasmaBolt',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation); } simulated function ScopeToggle() { if (bHasScope) { if (bZoomed) ScopeOff(); else ScopeOn(); } } The Pawn(Owner) parts are being used to get the location and rotation to fire the projectile at. Also, this can be used to modify the owner of a weapon in several other 'interesting' ways... Now, if you have a weapon with a scope on it, and this code in it's source, the scope will, instead of zooming in, spit out plasma bolts. Written by [A]llan. Obtaining player's IP address PlayerIP = Player.GetPlayerNetworkAddress(); PlayerIP=left(PlayerIP,instr(PlayerIP,\":\")); The first line gets your IP and port (e.g. 213.170.168.2:4000, where 213.170.168.2 is a IP and 4000 is a port) and the second line filters port leaving only an IP address. Recognising maps if (Level.NetMode != NM_Standalone) { switch LevelString { case \"DXMP_CMD.LevelInfo0\": // Actions only for DXMP_CMD break; case \"DXMP_Area51Bunker.LevelInfo0\": // Actions only for DXMP_Area51Bunker break; } } Recognising custom parameters If you're planning to make functions of your mutator recognise user typed string, like, for example, user ID on the server , that's how you can do it: function Mutate (String S, PlayerPawn Player) { local string usrstr; // The following code will obtain everything user // typed after command \"mutate typed\". If you // typed \"mutate typed blah\", it should return \"blah\" // in a client message if (mid(S, 0, 5) ~= \"typed \") { usrstr = mid(S, 5); Player.ClientMessage(\"You typed\"@usrstr); } Super.Mutate(S,Player); } Switching teams The essence of MMSwitcher, the code of switching player's team without killing him or her and with updating his or her user.ini. Team IDs: 0 - UNATCO 1 - NSF local pawn victim; Level.Game.ChangeTeam(victim,0); // set to needed team PlayerPawn(victim).ClientChangeTeam(0); // set to needed team Spawning That's how we can find a suitable for spawning spawn point (thanks to Nobody for the code): local navigationpoint navpoint; navpoint=Level.Game.FindPlayerStart(victim,0); // Move victim to it victim.setLocation(navpoint.location); Managing augmentations If you want to delete all augs of a player and to add a specific one, that's how you can do it: local augmentation aug; DeusExPlayer(Owner).AugmentationSystem.ResetAugmentations(); aug = DeusExPlayer(Other).AugmentationSystem.Spawn(class'DeusEx.AugLight', DeusExPlayer(Other).AugmentationSystem); DeusExPlayer(Other).AugmentationSystem.FirstAug = aug; DeusExPlayer(Other).AugmentationSystem.GivePlayerAugmentation(class'DeusEx.AugLight') Written by Daedalus and Alex. Listed here are a few DeusEx type-fonts for use with ScriptedTextures and for making window text. Engine Engine.BigFont Engine.LargeFont Engine.MedFont Engine.SmallFont DeusExUI DeusExUI.FontComputer8x20_A DeusExUI.FontComputer8x20_B DeusExUI.FontComputer8x20_C DeusExUI.FontConversation DeusExUI.FontConversationBold DeusExUI.FontConversationLarge DeusExUI.FontConversationLargeBold DeusExUI.FontFixedWidthLocation DeusExUI.FontFixedWidthSmall DeusExUI.FontFixedWidthSmall_DS DeusExUI.FontHUDWingDings DeusExUI.FontLocation DeusExUI.FontMenuExtraLarge DeusExUI.FontMenuHeaders DeusExUI.FontMenuHeaders_DS DeusExUI.FontMenuSmall DeusExUI.FontMenuSmall_DS DeusExUI.FontMenuTitle DeusExUI.FontMenuSansSerif_8 DeusExUI.FontMenuSansSerif_8_Bold DeusExUI.FontTiny DeusExUI.FontSpinningDX DeusExUI.FontTitleLarge DeusExUI.FontMenuHeaders_DS If I find more, I'll post em :-) Written by [A]llan. Training Guns The idea of so-called \"training guns\" seems to be flying around a lot lately among clans (perhaps because of the rift between skilled players, and average players?), and some strange solutions have been put forward. In this, I will show you the code needed to figure out what damage has been done to the player hit, as well as where it was done. This code is for classes branching from WeaponRifle: function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z) { local int MPHitLoc; // used to reference where we last hit. local float Multuplier; // stuff for superclass code (Code from a previous classes version of the code) // COPIED FROM DeusExWeapon.uc, so we can see the damage modification amount. // AugCombat increases our damage if hand to hand Multuplier = 1.0; // skill also affects our damage // GetWeaponSkill returns 0.0 to -0.7 (max skill/aug) Multuplier += -2.0 * GetWeaponSkill(); // END OF COPIED CODE Super.ProcessTraceHit(Other,Hitlocation,HitNormal,X,Y,Z); // Call all previous version of the code. if (DeusExPlayer(Other)!=None) { MPHitLoc = DeusExPlayer(Other).GetMPHitLocation(HitLocation); switch(MPHitLoc) { case 0: break; case 1: DeusExPlayer(Owner).ClientMessage(\"|cFF8000BOOM! HEADSHOT!!! 2x Damage!\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*2*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*2$\"\"); break; case 2: DeusExPlayer(Owner).ClientMessage(\"Body Shot\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 3: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Left)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 4: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Right)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 5: DeusExPlayer(Owner).ClientMessage(\"Leg Shot(Left)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 6: DeusExPlayer(Owner).ClientMessage(\"Leg Shot(Right)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; default: break; } } } Right... some explanation to how this works: // AugCombat increases our damage if hand to hand Multuplier = 1.0; // skill also affects our damage // GetWeaponSkill returns 0.0 to -0.7 (max skill/aug) Multuplier += -2.0 * GetWeaponSkill(); This is code to modify the amount of damage finally dealt. The proper version of this, that is used for damage modification is called in the Super. whatever call. MPHitLoc = DeusExPlayer(Other).GetMPHitLocation(HitLocation); This code checks if the actor referenced as \"Other\" (this is what you end up hitting with the weapon shot in this case) is a DeusExPlayer, and if it is, runs the function GetMPHitLocation from the player that you hit. This then sets the variable MPHitLoc at a certain value (1 to 6, 0 for special damage types (i.e.: PoisonEffect (lingering poison from darts, TearGas, etc) and EMP, and NanoVirus, even though it has no effect on humans)), where it is then used in a \"Switch\". switch(MPHitLoc) This runs through all the posibilities that you code into this section when it is called. If the value in the brackets of the switch (in this case, MPHitLoc) matches any of the coded values, something happens, based on what you coded, e.g.: case 4: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Right)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; If the value MPHitLoc was 4, you would see a message saying you hit the player in their right arm. Then, you would be told how much damage you dealt. The formula is (if you're not scoped) \u2014 HitDamage(25)*Skill(0 to 3.4)*mpNoScopeMult(0.35)=Damage(?) However, if this is not to be used on a class branching off of WeaponRifle, you must use this code: function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z) { local int MPHitLoc; // used to reference where we last hit. local float Multuplier; // stuff for superclass code (Code from a previous classes version of the code) // COPIED FROM DeusExWeapon.uc, so we can see the damage modification amount. // AugCombat increases our damage if hand to hand Multuplier = 1.0; // skill also affects our damage // GetWeaponSkill returns 0.0 to -0.7 (max skill/aug) Multuplier += -2.0 * GetWeaponSkill(); // END OF COPIED CODE Super.ProcessTraceHit(Other,Hitlocation,HitNormal,X,Y,Z); // Call all previous version of the code. if (DeusExPlayer(Other)!=None) { MPHitLoc = DeusExPlayer(Other).GetMPHitLocation(HitLocation); switch(MPHitLoc) { case 0: break; case 1: DeusExPlayer(Owner).ClientMessage(\"|cFF8000BOOM! HEADSHOT!!! 2x Damage!\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*2$\"\"); break; case 2: DeusExPlayer(Owner).ClientMessage(\"Body Shot\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 3: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Left)\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 4: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Right)\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 5: DeusExPlayer(Owner).ClientMessage(\"Leg Shot(Left)\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 6: DeusExPlayer(Owner).ClientMessage(\"Leg Shot(Right)\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; default: break; } } } The difference in this code is, that there is no reference to mpNoScopeMult, as WeaponRifle is the only class to use it. That should be all for training guns. Peace! Written by Allan. Anatomy of a Source File //This page is formatted so that it will compile when pasted directly in to a UC file. //=========================================== //Commenting: Lines starting with \"//\" //or paragraphs surrounded by /* and */ are Commented, meaning ignored by compilers. //Can be used for making your own notes to remember what things do class MyObject extends AmmoCrate; /*MyObject is the class name for this object, used for referencing this object in other functions, such as summoning, or accessing its functions and variables from another object. Make it whatever you want, but make sure to follow the rules of: * Keep it short, to save time typing it later * Make sure its unique, the game will get confused if you have two objects called the same thing. * No special characters, letters and numbers only. The `extends Actor` means it takes its functions, variables and base coding from that object. Example, Actor is the bare basic object, no inherited stuff, but if you extend DeusExWeapon, it becomes a base for a new weapon, or Mutator makes it function as a mutator. For this example, DeusExDecoration is used, making it act as a decoration, such as ammo crates or lamps. This is important depending on what you WANT it to do, but more specifically, AmmoCrate, because we want the specific properties of the crate as well. Making the line read \"class MyObject extends DeusExDecoration config(MyMod);\" turns the Config flag on, and will create an .ini file that contains all the config variables set below, allowing altering at any time, and the word inside the brackets decides the name of the config file, usually best practice is keeping it the same as the mod file, but you can make it anything else, even if it already exists. For example, entering Mutators will make it add on to the Mutators.ini file that most hosts already have, which can be helpful to keep the system tidy.*/ var() string Str; var int i; var DeusExPlayer DXP; /*Variables are pieces of information you want the file to remember later, they can be modified and stored but will reset between each instance, meaning every time a new version of this object is created ingame, it'll use the defaults or nothing. The purposes of variables vary, in this case, we are storing a String, meaning a word or words, int meaning Integer, numbers, and a DeusExPlayer, meaning a human player class. There's various options for creating variables. Making var in to var() makes the value modifiable in the SDK, when placed in maps through its properties, while making it var config means the value becomes global between all instances of this object and can be modified through an .ini file, only if the config flag is set at the top of the file though. A line starting with function is.. well, a function, basically a container for the actual code. In this case, we're only modifying a base function from the master class of DeusExDecoration. Frob is called when a player examines the object. If we were creating a new function, we'd need to Call it somewhere to actually make it happen, which we will do here. The parts inside the brackets are Atributes, slightly more complicated to explain, but in this case, Actor Frobber is set by the player class, telling this object that the Frobber is themself, they're basically temporary variables used for specific things, like telling another class to store a variable to use in one specific function or to send one temporary variable to another function. */ function Frob(Actor Frobber, Inventory frobWith) { /*We wont use it here, but you can create temporary variables inside any function using the same format as var x x, but instead as local x x, these are variables ONLY used inside this function, and will be reset and forgotten every time the function is called.*/ //A Failsafe, this line basically says If the frobber variable is not blank, //and there IS a frobber, continue if(DeusExPlayer(Frobber) != None) { /*A Function call, this is a function we're going to create, and as you can see its calling str as its atribute, this is the variable we set at the top of the file.*/ DoAThing(str); /*//this basically says, add one to i, meaning every time this function is called, every time someone frobs, the variable gets one bigger. Altering integers has many options, they can be formatted in more complex formulas such as 1+6*2, meaning 1 plus six then times by two, but 1++ is the same as 1+1. And if you have a variable integer, they can be used instead of raw numbers, like here, we're using i instead.*/ i++ //Storing the player class in a variable so we can access it later. DXP = DeusExPlayer(Frobber); } } /*Notice functions and \"if statements\" like this are surrounded by the brackets, this is important to tell the compiler that whats happening here is contained here, everything inside the the brackets only is accessed if the function above is passed, so in this example, the if statement is only checked if Frob is called, and the DoAThing is only called if the IF statement checks*/ /*Our custom function, defining our new variable, THING, which is set to whatever the classes Str variable is, because in the Frob function, when this function is called, its telling this variable to be that variable.*/ function DoAThing(String thing) { /*BroadcastMessage is a default function stored in Actor, so anything we want to make will have access to this, it basically prints a message to everyone.*/ BroadcastMessage(DXP.PlayerReplicationInfo.PlayerName$\" has frobbed the object! It has been frobbed \"$i$\" times!\"); DXP.ClientMessage(thing); /*Now, whats happening here.... In Broadcast, the variable from the Player we stored, specifically its PlayerName is being accessed, which will print out that players name in to the broadcast in the game, and further in, the i variable is also being accessed. As we know, this variable increased each time its frobbed. And then, ClientMessage, this is a function inside the player class, so we're calling DXP's function there and ClientMessage then tells that player whatever the variable is in a private client message.*/ } /*DefaultProperties, the block that sets the variables, basically. Any variable you define here becomes the default permenantly in the game. So here is where you set what you want the Str variable to tell the game, and also you can define other properties such as Health, its Mesh, HitPoints, ItemName etc. Most are self explanatory. * Formatting-wise, each property has its own layout or format, for numbers, it'd be plain i=2 etc. * For Strings, they need to be in quote marks, like below. * For more advanced things and if you ever don't know, check other classes for examples, any decoration or item will have Mesh or Texture examples.*/ defaultproperties { ItemName=\"Frob Counting Crate\" Str=\"Keep frobbing me, get that number higher\" }","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" />Coding"},{"location":"coding/#intro","text":"First off, setting up files; For editing code , you can either use Notepad (windows) or the Linux equivelant (Gedit usually), it works. But the alternative is Notepad++ and the USCRIPT syntax highlighting, which colours in the code to make it easier to understand, and also will be helpful for a few other aspects. Download Notepad++ and Language File for Uscript (Right click and save-as to avoid it opening in-browser) For Windows, install as normal. For Linux, run the installer under Wine. Once done and loaded, in Language drop down box, click User defined language and click Import, and select the .xml file. Save that and now any .uc files should load with the syntax highlighting. Another alternative for Linux is the Geany IDE , which basically feels like a native N++ for Linux. It is also available on Windows. For compiling code , install the SDK through whatever means you want. I recommend either Deus Ex Editing Pack 2.2 or Deus Ex Unreal Ed updated Installer. Same install instructions as Notepad++. Editing Pack includes a collection of software used for editing, most unneeded, but still handy. In the end, you should end up with a file in Deus Ex/System/ called ucc.exe. If thats there, its installed, and thats all we need. If you want a good base to start off, open up the SDK/Unreal Ed, and in the Classes browser, just click Export All. This decompiles the entire game source code in to the Deus Ex/ folder. If you have code you already want to compile, first, think of a name for the package, example MyMod , but maybe something more clever. Create a folder in Deus Ex directory called MyMod (or whatever you want to call it). Inside THAT, create a folder called Classes . Inside THAT, put your .uc files. Open DeusEx.ini file, search for the list of EditPackages, and at the bottom of that list, add your own, E.g. EditPackages=MyMod This next part varies based on setups, but the end goal is to have the command line of your OS directed to Deus Ex/System. Windows 7+ : Shift-Right Click the background of the System folder with no files selected, and click Open Command Line Here. Windows XP and earlier : Run > cmd.exe, and enter cd followed by the path to your DX system, e.g. cd C:/Deus Ex/System/ Linux : Theres many ways, the XP way works using the Terminal, but in the Thunar file editor, theres an option in the drop down box to Open Terminal Here. Once you're there, enter ucc make It'll attempt to compile the list, if the .u files exist, it'll skip it, so it'll ignore all the default DX files, and attempt your custom file.","title":"Intro"},{"location":"coding/#useful-functions","text":"","title":"Useful Functions"},{"location":"coding/#replicated-exec-how-to-remotely-execute-commands-on-players","text":"replication { //Replicating the function so it executes on the client, not the server reliable if (Role == ROLE_Authority) ReplExec; } //Replicated Exec simulated function ReplExec(DeusExPlayer Player, string Command) { SetOwner(Player); Player.ConsoleCommand(Command); SetOwner(self); }","title":"Replicated Exec (How to remotely execute commands on players)"},{"location":"coding/#string-splitting","text":"//Split - based on Python, by Kaiser //Takes the Original string, and returns the string found between LeftCut and RightCut, optionally having offsets on either side //Examples: //str = <message>!blah!</message> - Split(str, \"<message>\", \"</message>\") returns !blah! //str = <message>!blah!</message> - Split(str, \"<message>\", \"</message>\", 1, -1) returns blah function string Split(string Original, string LeftCut, string RightCut, optional int OffsetLeft, optional int OffsetRight) { local int leftline, rightline; leftline = InStr(Original, LeftCut); leftline += Len(LeftCut); leftline += OffsetLeft; rightline = InStr(Original, RightCut); rightline += OffsetRight; return Mid(Original, leftline, rightline-leftline); }","title":"String Splitting"},{"location":"coding/#string-replacing","text":"//Repl - based on Unreal 2 function, backported by Kaiser //Takes the Original string, returns the string with every instance of Target replaced with ReplaceWith //Example: str = \"one two four\" - Repl(str, \"four\", \"three\") returns \"one two three\" function string Repl(string Original, string Target, string ReplaceWith) { local string TempMessage, TempLeft, TempRight, OutMessage, _TmpString; OutMessage=Original; while (instr(caps(outmessage), Target) != -1) { tempRight=(right(OutMessage, (len(OutMessage)-instr(caps(OutMessage), Target))-Len(Target))); tempLeft=(left(OutMessage, instr(caps(OutMessage), Target)) ); OutMessage=TempLeft$ReplaceWith$TempRight; } return OutMessage; }","title":"String Replacing"},{"location":"coding/#getting-some-player-variables","text":"//Player variable functions //Gives you a readable name of whatever is inputted ~Kaiser function string GetReadableName(Actor A) { if(DeusExDecoration(A) != None) return DeusExDecoration(A).itemName; else if(Inventory(A) != None) return Inventory(A).itemName; else if(ScriptedPawn(A) != None) return ScriptedPawn(A).FamiliarName; else if(DeusExPlayer(A) != None) return DeusExPlayer(A).PlayerReplicationInfo.PlayerName; else if(DeusExMover(A) != None) return string(DeusExMover(A).Tag); else return \"\"; } //Quickly gives the name of the current pawn function string GetName(PlayerPawn P) { if(P != None) return P.PlayerReplicationInfo.PlayerName; else return \"[No player found]\"; } function string GetNameFromID(int id) { local PlayerPawn P; foreach AllActors(class'PlayerPawn', P) if(P.PlayerReplicationInfo.PlayerID == i) return P.PlayerReplicationInfo.PlayerName; } function string GetIDFromName(string playername) { local PlayerPawn P; foreach AllActors(class'PlayerPawn', P) if(instr(caps(P.PlayerReplicationInfo.PlayerName), caps(str)) != -1) return P.PlayerReplicationInfo.PlayerID; } function int GetID(PlayerPawn P) { if(P != None) return P.PlayerReplicationInfo.PlayerID; else return -1; } function string GetIP(PlayerPawn P) { local string IP; if(P != None) { IP = P.GetPlayerNetworkAddress(); IP = Left(IP,InStr(IP,\":\")); return IP; } else return \"[No player found]\"; } function PlayerPawn GetPlayerFromID(int i) { local PlayerPawn P; foreach AllActors(class'PlayerPawn', P) if(P.PlayerReplicationInfo.PlayerID == i) return P; } function PlayerPawn GetPlayerFromName(string str) { local PlayerPawn P; foreach AllActors(class'PlayerPawn', P) if(instr(caps(P.PlayerReplicationInfo.PlayerName), caps(str)) != -1) return P; }","title":"Getting some player variables"},{"location":"coding/#datetime","text":"function string GetDate() { return level.day$\"/\"$level.month$\"/\"$level.year; } function string GetTime() { local string formattedmin; //We do this part here because of how int's are zeroed. //By default if we just take the level.minute as our time, //a time like \"11:09\" would show as \"11:9\", not so good, //this section inserts the 0 when needed. if(level.minute <= 9) { formattedmin = \"0\"$level.minute; } else { formattedmin = string(level.minute); } return level.hour$\":\"$formattedmin; }","title":"Date/time"},{"location":"coding/#laserscope-keys","text":"This hopes to teach a little about how to make your own cool functions out of the Ammo Switching, Scope, and Laser Sight functions. First off, identifying the functions that'll be needed to be changed to edit the functionality of these functions. First off: Scope. ScopeOn(); ScopeOff(); ScopeToggle(); and their codes are: function ScopeOn() { if (bHasScope &amp;&amp; !bZoomed &amp;&amp; (Owner != None) &amp;&amp; Owner.IsA('DeusExPlayer')) { // Show the Scope View bZoomed = True; RefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed); } } function ScopeOff() { if (bHasScope &amp;&amp; bZoomed &amp;&amp; (Owner != None) &amp;&amp; Owner.IsA('DeusExPlayer')) { bZoomed = False; // Hide the Scope View RefreshScopeDisplay(DeusExPlayer(Owner), False, bZoomed); //DeusExRootWindow(DeusExPlayer(Owner).rootWindow).scopeView.DeactivateView(); } } simulated function ScopeToggle() { if (IsInState('Idle')) { if (bHasScope &amp;&amp; (Owner != None) &amp;&amp; Owner.IsA('DeusExPlayer')) { if (bZoomed) ScopeOff(); else ScopeOn(); } } } However, you don't want a boring old scope button thingy, do you? No? Well then, hang about. I'm going to show you how to get it to do something intresting... ;-) First, we strip out as much crap as possible.. function ScopeOn() { } function ScopeOff() { } simulated function ScopeToggle() { if (bHasScope) { if (bZoomed) ScopeOff(); else ScopeOn(); } } Right, that's gotten rid of everything that the original scope needs. (Note, this'll mean you can no longer use a scope, so make something decent to replace it...) Now, to make it do something cool. Hmm... ideas ideas ideas... Well, I suppose summoning a Plasma Bolt will have to do. I can't think of anything better. function ScopeOn() { Spawn(class'PlasmaBolt',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation); } function ScopeOff() { Spawn(class'PlasmaBolt',Pawn(Owner),,Pawn(Owner).Location,Pawn(Owner).ViewRotation); } simulated function ScopeToggle() { if (bHasScope) { if (bZoomed) ScopeOff(); else ScopeOn(); } } The Pawn(Owner) parts are being used to get the location and rotation to fire the projectile at. Also, this can be used to modify the owner of a weapon in several other 'interesting' ways... Now, if you have a weapon with a scope on it, and this code in it's source, the scope will, instead of zooming in, spit out plasma bolts. Written by [A]llan.","title":"Laser/Scope keys"},{"location":"coding/#obtaining-players-ip-address","text":"PlayerIP = Player.GetPlayerNetworkAddress(); PlayerIP=left(PlayerIP,instr(PlayerIP,\":\")); The first line gets your IP and port (e.g. 213.170.168.2:4000, where 213.170.168.2 is a IP and 4000 is a port) and the second line filters port leaving only an IP address.","title":"Obtaining player's IP address"},{"location":"coding/#recognising-maps","text":"if (Level.NetMode != NM_Standalone) { switch LevelString { case \"DXMP_CMD.LevelInfo0\": // Actions only for DXMP_CMD break; case \"DXMP_Area51Bunker.LevelInfo0\": // Actions only for DXMP_Area51Bunker break; } }","title":"Recognising maps"},{"location":"coding/#recognising-custom-parameters","text":"If you're planning to make functions of your mutator recognise user typed string, like, for example, user ID on the server , that's how you can do it: function Mutate (String S, PlayerPawn Player) { local string usrstr; // The following code will obtain everything user // typed after command \"mutate typed\". If you // typed \"mutate typed blah\", it should return \"blah\" // in a client message if (mid(S, 0, 5) ~= \"typed \") { usrstr = mid(S, 5); Player.ClientMessage(\"You typed\"@usrstr); } Super.Mutate(S,Player); }","title":"Recognising custom parameters"},{"location":"coding/#switching-teams","text":"The essence of MMSwitcher, the code of switching player's team without killing him or her and with updating his or her user.ini. Team IDs: 0 - UNATCO 1 - NSF local pawn victim; Level.Game.ChangeTeam(victim,0); // set to needed team PlayerPawn(victim).ClientChangeTeam(0); // set to needed team","title":"Switching teams"},{"location":"coding/#spawning","text":"That's how we can find a suitable for spawning spawn point (thanks to Nobody for the code): local navigationpoint navpoint; navpoint=Level.Game.FindPlayerStart(victim,0); // Move victim to it victim.setLocation(navpoint.location);","title":"Spawning"},{"location":"coding/#managing-augmentations","text":"If you want to delete all augs of a player and to add a specific one, that's how you can do it: local augmentation aug; DeusExPlayer(Owner).AugmentationSystem.ResetAugmentations(); aug = DeusExPlayer(Other).AugmentationSystem.Spawn(class'DeusEx.AugLight', DeusExPlayer(Other).AugmentationSystem); DeusExPlayer(Other).AugmentationSystem.FirstAug = aug; DeusExPlayer(Other).AugmentationSystem.GivePlayerAugmentation(class'DeusEx.AugLight') Written by Daedalus and Alex. Listed here are a few DeusEx type-fonts for use with ScriptedTextures and for making window text.","title":"Managing augmentations"},{"location":"coding/#engine","text":"Engine.BigFont Engine.LargeFont Engine.MedFont Engine.SmallFont","title":"Engine"},{"location":"coding/#deusexui","text":"DeusExUI.FontComputer8x20_A DeusExUI.FontComputer8x20_B DeusExUI.FontComputer8x20_C DeusExUI.FontConversation DeusExUI.FontConversationBold DeusExUI.FontConversationLarge DeusExUI.FontConversationLargeBold DeusExUI.FontFixedWidthLocation DeusExUI.FontFixedWidthSmall DeusExUI.FontFixedWidthSmall_DS DeusExUI.FontHUDWingDings DeusExUI.FontLocation DeusExUI.FontMenuExtraLarge DeusExUI.FontMenuHeaders DeusExUI.FontMenuHeaders_DS DeusExUI.FontMenuSmall DeusExUI.FontMenuSmall_DS DeusExUI.FontMenuTitle DeusExUI.FontMenuSansSerif_8 DeusExUI.FontMenuSansSerif_8_Bold DeusExUI.FontTiny DeusExUI.FontSpinningDX DeusExUI.FontTitleLarge DeusExUI.FontMenuHeaders_DS If I find more, I'll post em :-) Written by [A]llan.","title":"DeusExUI"},{"location":"coding/#training-guns","text":"The idea of so-called \"training guns\" seems to be flying around a lot lately among clans (perhaps because of the rift between skilled players, and average players?), and some strange solutions have been put forward. In this, I will show you the code needed to figure out what damage has been done to the player hit, as well as where it was done. This code is for classes branching from WeaponRifle: function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z) { local int MPHitLoc; // used to reference where we last hit. local float Multuplier; // stuff for superclass code (Code from a previous classes version of the code) // COPIED FROM DeusExWeapon.uc, so we can see the damage modification amount. // AugCombat increases our damage if hand to hand Multuplier = 1.0; // skill also affects our damage // GetWeaponSkill returns 0.0 to -0.7 (max skill/aug) Multuplier += -2.0 * GetWeaponSkill(); // END OF COPIED CODE Super.ProcessTraceHit(Other,Hitlocation,HitNormal,X,Y,Z); // Call all previous version of the code. if (DeusExPlayer(Other)!=None) { MPHitLoc = DeusExPlayer(Other).GetMPHitLocation(HitLocation); switch(MPHitLoc) { case 0: break; case 1: DeusExPlayer(Owner).ClientMessage(\"|cFF8000BOOM! HEADSHOT!!! 2x Damage!\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*2*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*2$\"\"); break; case 2: DeusExPlayer(Owner).ClientMessage(\"Body Shot\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 3: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Left)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 4: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Right)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 5: DeusExPlayer(Owner).ClientMessage(\"Leg Shot(Left)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 6: DeusExPlayer(Owner).ClientMessage(\"Leg Shot(Right)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; default: break; } } } Right... some explanation to how this works: // AugCombat increases our damage if hand to hand Multuplier = 1.0; // skill also affects our damage // GetWeaponSkill returns 0.0 to -0.7 (max skill/aug) Multuplier += -2.0 * GetWeaponSkill(); This is code to modify the amount of damage finally dealt. The proper version of this, that is used for damage modification is called in the Super. whatever call. MPHitLoc = DeusExPlayer(Other).GetMPHitLocation(HitLocation); This code checks if the actor referenced as \"Other\" (this is what you end up hitting with the weapon shot in this case) is a DeusExPlayer, and if it is, runs the function GetMPHitLocation from the player that you hit. This then sets the variable MPHitLoc at a certain value (1 to 6, 0 for special damage types (i.e.: PoisonEffect (lingering poison from darts, TearGas, etc) and EMP, and NanoVirus, even though it has no effect on humans)), where it is then used in a \"Switch\". switch(MPHitLoc) This runs through all the posibilities that you code into this section when it is called. If the value in the brackets of the switch (in this case, MPHitLoc) matches any of the coded values, something happens, based on what you coded, e.g.: case 4: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Right)\"); If(!bZoomed) DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*mpNoScopeMult$\"\"); else DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; If the value MPHitLoc was 4, you would see a message saying you hit the player in their right arm. Then, you would be told how much damage you dealt. The formula is (if you're not scoped) \u2014 HitDamage(25)*Skill(0 to 3.4)*mpNoScopeMult(0.35)=Damage(?) However, if this is not to be used on a class branching off of WeaponRifle, you must use this code: function ProcessTraceHit(Actor Other, Vector HitLocation, Vector HitNormal, Vector X, Vector Y, Vector Z) { local int MPHitLoc; // used to reference where we last hit. local float Multuplier; // stuff for superclass code (Code from a previous classes version of the code) // COPIED FROM DeusExWeapon.uc, so we can see the damage modification amount. // AugCombat increases our damage if hand to hand Multuplier = 1.0; // skill also affects our damage // GetWeaponSkill returns 0.0 to -0.7 (max skill/aug) Multuplier += -2.0 * GetWeaponSkill(); // END OF COPIED CODE Super.ProcessTraceHit(Other,Hitlocation,HitNormal,X,Y,Z); // Call all previous version of the code. if (DeusExPlayer(Other)!=None) { MPHitLoc = DeusExPlayer(Other).GetMPHitLocation(HitLocation); switch(MPHitLoc) { case 0: break; case 1: DeusExPlayer(Owner).ClientMessage(\"|cFF8000BOOM! HEADSHOT!!! 2x Damage!\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier*2$\"\"); break; case 2: DeusExPlayer(Owner).ClientMessage(\"Body Shot\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 3: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Left)\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 4: DeusExPlayer(Owner).ClientMessage(\"Arm Shot(Right)\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 5: DeusExPlayer(Owner).ClientMessage(\"Leg Shot(Left)\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; case 6: DeusExPlayer(Owner).ClientMessage(\"Leg Shot(Right)\"); DeusExPlayer(Owner).ClientMessage(\"Damage=\"$HitDamage*Multuplier$\"\"); break; default: break; } } } The difference in this code is, that there is no reference to mpNoScopeMult, as WeaponRifle is the only class to use it. That should be all for training guns. Peace! Written by Allan.","title":"Training Guns"},{"location":"coding/#anatomy-of-a-source-file","text":"//This page is formatted so that it will compile when pasted directly in to a UC file. //=========================================== //Commenting: Lines starting with \"//\" //or paragraphs surrounded by /* and */ are Commented, meaning ignored by compilers. //Can be used for making your own notes to remember what things do class MyObject extends AmmoCrate; /*MyObject is the class name for this object, used for referencing this object in other functions, such as summoning, or accessing its functions and variables from another object. Make it whatever you want, but make sure to follow the rules of: * Keep it short, to save time typing it later * Make sure its unique, the game will get confused if you have two objects called the same thing. * No special characters, letters and numbers only. The `extends Actor` means it takes its functions, variables and base coding from that object. Example, Actor is the bare basic object, no inherited stuff, but if you extend DeusExWeapon, it becomes a base for a new weapon, or Mutator makes it function as a mutator. For this example, DeusExDecoration is used, making it act as a decoration, such as ammo crates or lamps. This is important depending on what you WANT it to do, but more specifically, AmmoCrate, because we want the specific properties of the crate as well. Making the line read \"class MyObject extends DeusExDecoration config(MyMod);\" turns the Config flag on, and will create an .ini file that contains all the config variables set below, allowing altering at any time, and the word inside the brackets decides the name of the config file, usually best practice is keeping it the same as the mod file, but you can make it anything else, even if it already exists. For example, entering Mutators will make it add on to the Mutators.ini file that most hosts already have, which can be helpful to keep the system tidy.*/ var() string Str; var int i; var DeusExPlayer DXP; /*Variables are pieces of information you want the file to remember later, they can be modified and stored but will reset between each instance, meaning every time a new version of this object is created ingame, it'll use the defaults or nothing. The purposes of variables vary, in this case, we are storing a String, meaning a word or words, int meaning Integer, numbers, and a DeusExPlayer, meaning a human player class. There's various options for creating variables. Making var in to var() makes the value modifiable in the SDK, when placed in maps through its properties, while making it var config means the value becomes global between all instances of this object and can be modified through an .ini file, only if the config flag is set at the top of the file though. A line starting with function is.. well, a function, basically a container for the actual code. In this case, we're only modifying a base function from the master class of DeusExDecoration. Frob is called when a player examines the object. If we were creating a new function, we'd need to Call it somewhere to actually make it happen, which we will do here. The parts inside the brackets are Atributes, slightly more complicated to explain, but in this case, Actor Frobber is set by the player class, telling this object that the Frobber is themself, they're basically temporary variables used for specific things, like telling another class to store a variable to use in one specific function or to send one temporary variable to another function. */ function Frob(Actor Frobber, Inventory frobWith) { /*We wont use it here, but you can create temporary variables inside any function using the same format as var x x, but instead as local x x, these are variables ONLY used inside this function, and will be reset and forgotten every time the function is called.*/ //A Failsafe, this line basically says If the frobber variable is not blank, //and there IS a frobber, continue if(DeusExPlayer(Frobber) != None) { /*A Function call, this is a function we're going to create, and as you can see its calling str as its atribute, this is the variable we set at the top of the file.*/ DoAThing(str); /*//this basically says, add one to i, meaning every time this function is called, every time someone frobs, the variable gets one bigger. Altering integers has many options, they can be formatted in more complex formulas such as 1+6*2, meaning 1 plus six then times by two, but 1++ is the same as 1+1. And if you have a variable integer, they can be used instead of raw numbers, like here, we're using i instead.*/ i++ //Storing the player class in a variable so we can access it later. DXP = DeusExPlayer(Frobber); } } /*Notice functions and \"if statements\" like this are surrounded by the brackets, this is important to tell the compiler that whats happening here is contained here, everything inside the the brackets only is accessed if the function above is passed, so in this example, the if statement is only checked if Frob is called, and the DoAThing is only called if the IF statement checks*/ /*Our custom function, defining our new variable, THING, which is set to whatever the classes Str variable is, because in the Frob function, when this function is called, its telling this variable to be that variable.*/ function DoAThing(String thing) { /*BroadcastMessage is a default function stored in Actor, so anything we want to make will have access to this, it basically prints a message to everyone.*/ BroadcastMessage(DXP.PlayerReplicationInfo.PlayerName$\" has frobbed the object! It has been frobbed \"$i$\" times!\"); DXP.ClientMessage(thing); /*Now, whats happening here.... In Broadcast, the variable from the Player we stored, specifically its PlayerName is being accessed, which will print out that players name in to the broadcast in the game, and further in, the i variable is also being accessed. As we know, this variable increased each time its frobbed. And then, ClientMessage, this is a function inside the player class, so we're calling DXP's function there and ClientMessage then tells that player whatever the variable is in a private client message.*/ } /*DefaultProperties, the block that sets the variables, basically. Any variable you define here becomes the default permenantly in the game. So here is where you set what you want the Str variable to tell the game, and also you can define other properties such as Health, its Mesh, HitPoints, ItemName etc. Most are self explanatory. * Formatting-wise, each property has its own layout or format, for numbers, it'd be plain i=2 etc. * For Strings, they need to be in quote marks, like below. * For more advanced things and if you ever don't know, check other classes for examples, any decoration or item will have Mesh or Texture examples.*/ defaultproperties { ItemName=\"Frob Counting Crate\" Str=\"Keep frobbing me, get that number higher\" }","title":"Anatomy of a Source File"},{"location":"community/","text":"Discords General Deus Ex HQ: https://discord.gg/KUA8acb Frozen Hell: https://discord.gg/syg8q8Y Deus Ex Reddit's Server: https://discord.gg/FTCtTPw Off Topic Productions: https://discord.gg/ZxSpWHK Mods Markieland/Vanilla Matters: https://discord.gg/GDcXCCw Deus Ex Revision: https://discord.gg/5pNtjXh GMDX: https://discord.gg/FfqNWSj Remakes Deus Ex Reborn (Unreal Engine 2 Remake): https://discord.gg/xVWCUpj Deus Ex Machina (Unreal Engine 4 Remake): https://discord.gg/DDgWP8k Another Deus Ex UE4 Project: https://discord.gg/XhkDanf Terminology Specific acronyms of Deus Ex community 0aug, ATDM, BTDM, DXSG, DXAG \u2014 see popular gametypes . 2027 - Project: 2027 Augs = augmentations CRD = Caran D'Ache (mod) DX = DE = Deus Ex DX:R = Deus Ex Reborn (mod) DXAG = Deus Ex Arx Genus (mod) DXCBP = Deus Ex Community Based Patch (same as DXMTL) DXMP = Deus Ex Multiplayer DXMS = Deus Ex Mapping Society DXMTL = Deus Ex Mutator Loader (a widely used patch for the servers, which improves security and fixes many bugs on the game). DXPZ = Deus Ex PartyZone (mod) DXSG = Deus Ex Stargate (mod) FL = FunLine GOTY = Game Of The Year GPF = General Protection Fault GS = GameSpy HDTP = High Definition Texture Pack IW = Invisible War KB = Knowledge Base MM = MiniMachina (a set of mods and mutators), also Mainman's mod , Minty's mod Mod = modification MS = masterserver MS3D = Milkshape 3D ( a 3D modelling program ) SDK = Software Development Kit (a set of programs made by developer for further development of a specific program/game by 3d party). Sshot = screenshot UED = Unreal Editor Internet/gaming slang afk = away from keyboard brb = be right back bs = bullshit cya = cu = see you (could be \"cover you ass\", by rarely used) ffs = for f*cks sake ftl = for the loss ftw = for the win fyi = for your information gf = good fight gg = good game (usually said in the end of the match or to emphasize one's sarcasm) gj = good job gl = good luck gr8 = great gs/ns = good/nice shot (could be just \"shot\") h8 = hate idk = I don't know IIRC = if I remember correctly IMO/IMHO/IMNSHO/IMAO - In my (humble / honest / not so humble / arrogant) opinion irl = in real life j/k = jk = just kidding (or \"jackass\") lol = laughing out loud m8 = mate np = no problem nvm = nevermind rofl = rolling on floor laughing stfu = shut the fuck up t = ty = thx = tnx = thank you/thanks ttyl = talk to you later wtf = what the fuck wth = what the hell Most of acronyms used during online gaming are common for all the communities and are available in the article called \u201cList of Internet slang phrases\u201d on Wikipedia. Please note that using AOL speak or net speak (\"dats wen u talk liek dat LOL\") gives you away as a newbie in the Internet or just immature. Editor's Note: The following is an archive of old KB pages which may no longer be relevant. Clans To put the question simply, a clan is a group/society of people who fight together. The clan may have different beliefs of how to fight also. Almost any game has a society of clans, whether supported by the game or not. Some games (unlike Deus Ex) have features such as \"clan search\" and \"quick join clans\". Unlike in other games, Deus Ex clans sometimes also make maps and mods, besides fighting. A clan gives you an ability to participate in planned games such as trainings and clanwars, learn some in-game tricks and significantly improve. You may see the list of active clans on our \" Links \" page. Clanwars A clanwar is a planned battle between clans. Planned games are nothing like normal games, because usually you play against a solid team of experienced players who also actively cooperate, and you won't be able to get \"easy kills\" of newbie players anymore. Team work is an important aspect of any clanwar. A weaker clan can always defeat the stronger one if there is a strong teamwork aspect in it. Usually clanwars are declared on the forums. To organise a clanwar you have to: Set up date and time and make sure all the players of your clan can make it Prepare \"backup\" players, in case someone doesn't show up in time Find a decent server which could handle a desired amount of players Find an administrator who would set up a password on it Clanwars are not easy to organise, yet they're fun to play. The more players participate, the harder it is to organise the war, and the enjoyable the clanwar is. Keep in mind that it's considered a bad form to insult members of opponent clan after the war ended. There is a place for sportsmanship, not for immature behaviour. The results vary \u2014 don't take them close to your heart. Sometimes a clan loses to another because of a server location (see \" factors worsening your gameplay \" article), or because the server hoster plays. When a server hoster plays on his or her server, the server will give him or her a big advantage and increase ping disadvantage to other players. Ideal clanwar Passworded server. At least 4 players in each team. 15+ minutes per map. Each side should be able to pick a map. Even teams. No flaming, rant; friendly atmosphere. The computer used for hosting isn't used for anything else. The hoster doesn't play. A neutral administrator, who watches the game, not plays. Here's a short list of commands which may be useful for watching: admin invisible true \u2014 enables invisibility ( admin invisible false disables it) admin ghost \u2014 enables ghost mode ( walk disables ghost mode) admin cheatview human \u2014 when enabled allows to watch other players, from 1st and 3d person views behindview 0 \u2014 toggles 1st person view behindview 1 \u2014 toggles 3d person view demorec random-file-name \u2014 to start a demo recording . It's risky when a player records a demorec by him- or herself because recording may decrease FPS and result in GPF (game crash). Therefore recordings of wars are usually done by such \"neutral administrators\". Links Editors Note: This list is old. *OLD*. Any important links will eventually get moved to the updated list. It's not guaranteed that the list contains all the links about Deus Ex and also it may have some mistakes. PlanetDeusEx.com \u2014 official Deus Ex site in GameSpy Planet Network. The site was archived in 2005, which means no news are being posted anymore, but you can still access the rest of pages. There is also a very active forum mainly about the singleplayer. Deus Ex Gaming \u2014 the site about Deus Ex which belongs to Edge . It contains a lot of information about the singleplayer and the forum . Deus Ex Machina \u2014 the site of TTLG network. It contains a lot of interviews, news and a forum . Official Eidos Interactive \u2014 the main publisher. The site doesn't contain much useful information, except for a forum . Aspyr media \u2014 Macintosh publisher. WestLake Interactive \u2014 the developer of Mac version of Deus Ex. Loki games \u2014 the developer of Linux version of Deus Ex (the project wasn't finished). Epic Games \u2014 Unreal Engine developers. Unreal Technology \u2014 the official Unreal Engine site. Portals Deus Ex on imdb.com (see also: trivia , forum ). Deus Ex on Wikipedia ( see also : Deus Ex 2 ). Deus Ex on ModDB ( see also : Zodiac , 2027 , TNM , Reborn (UT'04 section) and the rest ) . Deus Ex on MobyGames ( see also : game credits , Deus Ex 2 , Ion Storm ). Deus Ex on Visual Walkthroughs \u2014 Deus E\u0445 visual walktrough. DXMP on frappr.com \u2014 the map with locations of DXMP players. Other languages DeusExZone.info \u2014 German community. The site contains huge downloads archive and an active forum. DeusEx.pl \u2014 Polish community. Multiplayer [A]lpha Deus Ex Mappers Society Community Improvement Zone \u2014 the site for multiplayer community. Wasn't updated for years. Casper's Deus Ex Place Host on multiple masterservers Modifications Deus Ex MTL \u2014 the development of the DXMTL anticheat modification. Caran D'Ache \u2014 another anticheat modification (works with DXMTL) Zora's World \u2014 the site of Nephthys mod developer. The mod protects the servers and enables web-download for players. Hejhujka's Deus Ex mods The Sheep's site Smuggler's Deus Ex mods Blade's Deus Ex World Helio Waltons maps Geist's maps Kili's maps and mods Mantra's maps Party Zone Sly's DXMP Jaeger's room [N]Phase Templar Knight Syndicate Clans All Deus Ex clans , from the beginning. In the list below we add only those clans, which have existed for over one year: [A] Alpha [3] [tBot] [III] Triad [CG] Common Ground {DXC} Deus Ex Council [EL] Elites & Legends [T]ranscend [Z] [MTX] Matrix [FGS] F*cking German Snipers Hunter Killers [REN] Renegades [N]ostalgia Inactive clans [GODZ] [V]engeance Notable clans which started from Deus Ex, but later moved to other games |GHOST| [DCSB] Dead Cows Strike Back Modifications (singleplayer only) Released Burden Of 80 Proof Redsun 2020 Hotel Carone The Cassandra Project \u2014 only the first part was released and the further development was officially stopped. Counterfeit \u2014 only the beta version was released and the further development was stopped. Hejhujka \u2014 minor add-ons as for singleplayer, as for multiplayer. World Of Kevo-sama \u2014 the site of Der Zeit Mann and Unknown Motives creator. Tristan 'Jherax' Blease \u2014 the site of Double Cross mod creator. The mod has won PlanetDeusEx Fan Mission Contest. Unleashed In development Project 2027 + Resurrection (see also: 2027 LJ community (Russian only)) . The Nameless Mod \u2014 the mod developed by Offtopic Productions . Deus Ex: Man in Black UNATCO Born Chronos \u2014 only the first mission was released. No information on current status. HDTP \u2014 \"High Definition Texture Pack\". Deus Ex: Reborn \u2014 conversion of Deus Ex to Unreal Tournament 2004 engine. Power and Love Stopped Klystron's Project Ghost In The Machine (see also: GITM World ) Deus Ex 2 Graphics by John P \u2014 texture packs. DX2 Rebirth File archives download.dxalpha.co.uk \u2014 the biggest file archive presently, with files for both Deus Ex and Deus Ex 2. dxmp.criminalsrpg.net \u2014 the file archive containing a lot of downloads for both singleplayer and multiplayer modes of Deus Ex 1 (author \u2014 moop, hoster \u2014 [A]lex ) . gravity-world.com \u2014 most multiplayer oriented archive (note that you have to register first) . deus-ex.net File Planet \u2014 the biggest file archive, ran by GameSpy (the link leads to \"Deus Ex series\" section; you need to be registered and logged in to download; registration is free) . File Shack File Front (see also: Deus Ex 2 ) . De2Files.com Programs Enhanced OpenGL renderer MilkShape 3D \u2014 a low poly modeling tool, great for the basics of DX modeling 3D Studio MAX - a high poly modeling tool, good for advanced stages of modeling in Deus Ex WOTGreal \u2014 the editing tool for UnrealEngine + the powerful resource extractor ModPlug \u2014 the program for editing and creating music in tracker format. Deus Ex Extractor \u2014 another powerful resource extractor, sharpened for Deus Ex (it can export even animations!) Dragon Unpacker \u2014 the sound/music extractor for Deus Ex 2. Nova Software Extractor \u2014 the sound/music extractor for Deus Ex 2. Winamp UMX plugin Deus Ex editing DX editing \u2014 the site about Deus Ex editing. Contains only a few articles, but an active forum . Tack's tutorials \u2014 the best site about Deus Ex editing by Steve Tack, Zodiac author. Constructor Unreal Wiki \u2014 the biggest Unreal Editing resource. Not much information about Deus Ex editing though. Endemia \u2014 an archive of textures and models. Prefab Lab \u2014 an archive of prefabs. The site is oriented to Unreal. unreal.gamedesign.net Lode's Unreal Wolf's Unreal Miscellaneous Deus Ex Continuity Bible Denton's Databank \u2014 the site with loads of information about singleplayer. SF Sounds \u2014 Steve Foxon's site, a musician of Zodiac and Redsun singleplayer mods. Deus-Ex.net Deus Ex Network Deus Ex Online Deus Ex Portal Redundant Weirdness Theos Ek Local Ditch Gaming Imporium Jimmycracker's Deus Ex Site Deus Ex Information Page nuwen.net \u2014 Deus Ex ChrisTheCynic Matthew's Deus Ex Page Snakey's site Sunglasses At Night Face Designs Invisible Online Deus Ex Tweak Guide Developers Witchboy's Cauldron \u2014 the homepage of Harvey \"witchboy\" Smith, the head designer of Deus Ex 1 and the manager of Deus Ex 2. Sheldon Pacotti \u2014 the page of Sheldon Pacotti, the conversation writer of Deus Ex 1. Frost Giant \u2014 Austin Grossman's homepage. He was doing additional conversations for Deus Ex. 7 Crows \u2014 Chris Todd, Deus Ex 1 text writer. The Tom Hall Press \u2014 Tom Hall's homepage. He was a voice actor for Howard Smith and Walton Simons. An Upset Spector named Warren \u2014 the page created by Warren Spector's fan. Stamford Hill \u2014 the page created by Reeves Gabrels ( American guitarist, writer of Deus Ex club tracks ) fan. On LiveJournal.com DeusExCommunity Project 2027 Reality FEMA \u2014 Federal Emergency Management Agency. World Trade Organization Castle Clinton NetHack \u2014 this game was mentioned by Austin Grossman in some of e-mails in Deus Ex. History (the links lead to web.archive.org ) DeusEx.com \u2014 the official flash site of the game. See also DXInvisibleWar.com , DeusEx2.com , TheConspiracy/ . Ion Storm \u2014 the website of Ion Storm, the developer of Deus Ex games. The company was ceased in 2005. Reeves Gabrels \u2014 the site of Reeves Gabrels, the creator club music in Deus Ex. unatco.com \u2014 the site had been created by the team of developers, but it was closed after 9/11. Deus Ex Center Unknown deus-ex.tanabi.org mj12.com bobpage.net contrast.150m.com/unatco Sources On planetdeusex.com forum On dxalpha.com forum Imperial's list of clans tda.mikwae.net/links.php home.kc.rr.com/bobfahey dusterstadl.de","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" />Community"},{"location":"community/#discords","text":"","title":"Discords"},{"location":"community/#general","text":"Deus Ex HQ: https://discord.gg/KUA8acb Frozen Hell: https://discord.gg/syg8q8Y Deus Ex Reddit's Server: https://discord.gg/FTCtTPw Off Topic Productions: https://discord.gg/ZxSpWHK","title":"General"},{"location":"community/#mods","text":"Markieland/Vanilla Matters: https://discord.gg/GDcXCCw Deus Ex Revision: https://discord.gg/5pNtjXh GMDX: https://discord.gg/FfqNWSj","title":"Mods"},{"location":"community/#remakes","text":"Deus Ex Reborn (Unreal Engine 2 Remake): https://discord.gg/xVWCUpj Deus Ex Machina (Unreal Engine 4 Remake): https://discord.gg/DDgWP8k Another Deus Ex UE4 Project: https://discord.gg/XhkDanf","title":"Remakes"},{"location":"community/#terminology","text":"","title":"Terminology"},{"location":"community/#specific-acronyms-of-deus-ex-community","text":"0aug, ATDM, BTDM, DXSG, DXAG \u2014 see popular gametypes . 2027 - Project: 2027 Augs = augmentations CRD = Caran D'Ache (mod) DX = DE = Deus Ex DX:R = Deus Ex Reborn (mod) DXAG = Deus Ex Arx Genus (mod) DXCBP = Deus Ex Community Based Patch (same as DXMTL) DXMP = Deus Ex Multiplayer DXMS = Deus Ex Mapping Society DXMTL = Deus Ex Mutator Loader (a widely used patch for the servers, which improves security and fixes many bugs on the game). DXPZ = Deus Ex PartyZone (mod) DXSG = Deus Ex Stargate (mod) FL = FunLine GOTY = Game Of The Year GPF = General Protection Fault GS = GameSpy HDTP = High Definition Texture Pack IW = Invisible War KB = Knowledge Base MM = MiniMachina (a set of mods and mutators), also Mainman's mod , Minty's mod Mod = modification MS = masterserver MS3D = Milkshape 3D ( a 3D modelling program ) SDK = Software Development Kit (a set of programs made by developer for further development of a specific program/game by 3d party). Sshot = screenshot UED = Unreal Editor","title":"Specific acronyms of Deus Ex community"},{"location":"community/#internetgaming-slang","text":"afk = away from keyboard brb = be right back bs = bullshit cya = cu = see you (could be \"cover you ass\", by rarely used) ffs = for f*cks sake ftl = for the loss ftw = for the win fyi = for your information gf = good fight gg = good game (usually said in the end of the match or to emphasize one's sarcasm) gj = good job gl = good luck gr8 = great gs/ns = good/nice shot (could be just \"shot\") h8 = hate idk = I don't know IIRC = if I remember correctly IMO/IMHO/IMNSHO/IMAO - In my (humble / honest / not so humble / arrogant) opinion irl = in real life j/k = jk = just kidding (or \"jackass\") lol = laughing out loud m8 = mate np = no problem nvm = nevermind rofl = rolling on floor laughing stfu = shut the fuck up t = ty = thx = tnx = thank you/thanks ttyl = talk to you later wtf = what the fuck wth = what the hell Most of acronyms used during online gaming are common for all the communities and are available in the article called \u201cList of Internet slang phrases\u201d on Wikipedia. Please note that using AOL speak or net speak (\"dats wen u talk liek dat LOL\") gives you away as a newbie in the Internet or just immature. Editor's Note: The following is an archive of old KB pages which may no longer be relevant.","title":"Internet/gaming slang"},{"location":"community/#clans","text":"To put the question simply, a clan is a group/society of people who fight together. The clan may have different beliefs of how to fight also. Almost any game has a society of clans, whether supported by the game or not. Some games (unlike Deus Ex) have features such as \"clan search\" and \"quick join clans\". Unlike in other games, Deus Ex clans sometimes also make maps and mods, besides fighting. A clan gives you an ability to participate in planned games such as trainings and clanwars, learn some in-game tricks and significantly improve. You may see the list of active clans on our \" Links \" page.","title":"Clans"},{"location":"community/#clanwars","text":"A clanwar is a planned battle between clans. Planned games are nothing like normal games, because usually you play against a solid team of experienced players who also actively cooperate, and you won't be able to get \"easy kills\" of newbie players anymore. Team work is an important aspect of any clanwar. A weaker clan can always defeat the stronger one if there is a strong teamwork aspect in it. Usually clanwars are declared on the forums. To organise a clanwar you have to: Set up date and time and make sure all the players of your clan can make it Prepare \"backup\" players, in case someone doesn't show up in time Find a decent server which could handle a desired amount of players Find an administrator who would set up a password on it Clanwars are not easy to organise, yet they're fun to play. The more players participate, the harder it is to organise the war, and the enjoyable the clanwar is. Keep in mind that it's considered a bad form to insult members of opponent clan after the war ended. There is a place for sportsmanship, not for immature behaviour. The results vary \u2014 don't take them close to your heart. Sometimes a clan loses to another because of a server location (see \" factors worsening your gameplay \" article), or because the server hoster plays. When a server hoster plays on his or her server, the server will give him or her a big advantage and increase ping disadvantage to other players. Ideal clanwar Passworded server. At least 4 players in each team. 15+ minutes per map. Each side should be able to pick a map. Even teams. No flaming, rant; friendly atmosphere. The computer used for hosting isn't used for anything else. The hoster doesn't play. A neutral administrator, who watches the game, not plays. Here's a short list of commands which may be useful for watching: admin invisible true \u2014 enables invisibility ( admin invisible false disables it) admin ghost \u2014 enables ghost mode ( walk disables ghost mode) admin cheatview human \u2014 when enabled allows to watch other players, from 1st and 3d person views behindview 0 \u2014 toggles 1st person view behindview 1 \u2014 toggles 3d person view demorec random-file-name \u2014 to start a demo recording . It's risky when a player records a demorec by him- or herself because recording may decrease FPS and result in GPF (game crash). Therefore recordings of wars are usually done by such \"neutral administrators\".","title":"Clanwars"},{"location":"community/#links","text":"Editors Note: This list is old. *OLD*. Any important links will eventually get moved to the updated list. It's not guaranteed that the list contains all the links about Deus Ex and also it may have some mistakes. PlanetDeusEx.com \u2014 official Deus Ex site in GameSpy Planet Network. The site was archived in 2005, which means no news are being posted anymore, but you can still access the rest of pages. There is also a very active forum mainly about the singleplayer. Deus Ex Gaming \u2014 the site about Deus Ex which belongs to Edge . It contains a lot of information about the singleplayer and the forum . Deus Ex Machina \u2014 the site of TTLG network. It contains a lot of interviews, news and a forum .","title":"Links"},{"location":"community/#official","text":"Eidos Interactive \u2014 the main publisher. The site doesn't contain much useful information, except for a forum . Aspyr media \u2014 Macintosh publisher. WestLake Interactive \u2014 the developer of Mac version of Deus Ex. Loki games \u2014 the developer of Linux version of Deus Ex (the project wasn't finished). Epic Games \u2014 Unreal Engine developers. Unreal Technology \u2014 the official Unreal Engine site.","title":"Official"},{"location":"community/#portals","text":"Deus Ex on imdb.com (see also: trivia , forum ). Deus Ex on Wikipedia ( see also : Deus Ex 2 ). Deus Ex on ModDB ( see also : Zodiac , 2027 , TNM , Reborn (UT'04 section) and the rest ) . Deus Ex on MobyGames ( see also : game credits , Deus Ex 2 , Ion Storm ). Deus Ex on Visual Walkthroughs \u2014 Deus E\u0445 visual walktrough. DXMP on frappr.com \u2014 the map with locations of DXMP players.","title":"Portals"},{"location":"community/#other-languages","text":"DeusExZone.info \u2014 German community. The site contains huge downloads archive and an active forum. DeusEx.pl \u2014 Polish community.","title":"Other languages"},{"location":"community/#multiplayer","text":"[A]lpha Deus Ex Mappers Society Community Improvement Zone \u2014 the site for multiplayer community. Wasn't updated for years. Casper's Deus Ex Place Host on multiple masterservers","title":"Multiplayer"},{"location":"community/#modifications","text":"Deus Ex MTL \u2014 the development of the DXMTL anticheat modification. Caran D'Ache \u2014 another anticheat modification (works with DXMTL) Zora's World \u2014 the site of Nephthys mod developer. The mod protects the servers and enables web-download for players. Hejhujka's Deus Ex mods The Sheep's site Smuggler's Deus Ex mods Blade's Deus Ex World Helio Waltons maps Geist's maps Kili's maps and mods Mantra's maps Party Zone Sly's DXMP Jaeger's room [N]Phase Templar Knight Syndicate","title":"Modifications"},{"location":"community/#clans_1","text":"All Deus Ex clans , from the beginning. In the list below we add only those clans, which have existed for over one year: [A] Alpha [3] [tBot] [III] Triad [CG] Common Ground {DXC} Deus Ex Council [EL] Elites & Legends [T]ranscend [Z] [MTX] Matrix [FGS] F*cking German Snipers Hunter Killers [REN] Renegades [N]ostalgia","title":"Clans"},{"location":"community/#inactive-clans","text":"[GODZ] [V]engeance","title":"Inactive clans"},{"location":"community/#notable-clans-which-started-from-deus-ex-but-later-moved-to-other-games","text":"|GHOST| [DCSB] Dead Cows Strike Back","title":"Notable clans which started from Deus Ex, but later moved to other games"},{"location":"game/","text":"Deus Ex Knowledge Base WIP.","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" /><em>Game</em>"},{"location":"game/#deus-ex-knowledge-base","text":"WIP.","title":"Deus Ex Knowledge Base"},{"location":"hosting/","text":"HOSTING Server Starter Windows Create a text file in your Deus Ex/System folder. Open it up, and place in the following code: @ECHO OFF title Server starter echo. Starting... deusex.exe DXMP_CMD?Game=DXMTL152b1.MTLTeam -server -LOG=server.log > NUL Edit the code to your desire. DXMP_CMD - Your map of choice. ?Game=xxx - Your gametype, leave default if you don't know what you're doing. THIS requires the DXMTL mod installed. Other options include DXMTL152b1.MTLDeathmatch. It is possible to use without MTL, but it is NOT RECOMMENDED. But if you insist, the format is DeusEx.DeathMatchGame or DeusEx.TeamDeathmatch Additional, adding ?Mutator=x after the Game string lets you force load mutators, example; map?Game=gametypestring?Mutator=mPack1.WeaponSelector The -Log=xxx flag lets you define a custom log file name, default is Server.log, which keeps a track of your entire server log while running. Renaming this isn't important really, but its an option. Another optional flag is -ini=xxx , which lets you define a seperate .ini file, instead of using the default DeusEx.ini . Once modified to your choice, save the file as ServerStarter.bat From now on, clicking on the new file will execute that code, starting the server. To edit it later, just right click and Edit. Linux (Specifically Debian XFCE environment, others may vary. Also assuming you installed via Wine and running the Windows install since DX isn't officially supported.) In your environment of choice, create a new Launcher file or .desktop file, through whatever package you use to manage those. For the Command, enter wine \"C:\\Deus Ex GOTY\\System\\deusex.exe\" DXMP_CMD?Game=DXMTL152b1.MTLTeam -server -LOG=server.log > NUL The Path to the deusex.exe varies, this is the default for GOG. And varies depending on how you installed it, through Wine or Steam Linux, check that up yourself. The rest of the code functions the same as the Windows version. Give it a name, untick Run in Terminal to save screen clutter and make it run more seamlessly, and save. Written by Kaiser Installing mods Place files in the propor directories inside the Deus Ex game folder; .u - /System/ .utx - /Textures/ .uax - /Sounds/ .umx - /Music/ .int - /System/ .ini - /System/ Open up DeusEx.ini and find the ServerPackages list, it'll look like; [DeusEx.DeusExGameEngine] CacheSizeMegs=4 UseSound=True ServerActors=IpDrv.UdpBeacon ServerActors=Nephthys.NptServerQuery ServerActors=Nephthys.NptServerUplink MasterServerAddress=master.333networks.com MasterServerPort=27900 ServerActors=Nephthys.NptServerUplink MasterServerAddress=master0.gamespy.com MasterServerPort=27900 ServerActors=Nephthys.NptServerUplink MasterServerAddress=master.epicgames.com MasterServerPort=27900 ServerActors=Nephthys.NptServerUplink MasterServerAddress=master.fragaholic.com MasterServerPort=27900 ServerPackages=DXMTL152b1 At the end of that list, add the .u file name to the list, without the .u, for example, if we have a mod called AM.u , we'll add ServerPackages=AM If the mod has a mutator or actor that should be spawned always in the server, the format is ServerActors=PackageName.ClassName , example; ServerActors=AM.AMutator Port Forwarding Note; Some information here may be outdated. A router blocks a lot of unknown Internet connections, so if you try to host a Deus Ex server, and you have a router, it is possible that your server will not show up in the server list. We are going to solve that. First, go here and look up your router for the manual on how-to-forward-ports (in the list of games find \"Dues Ex\", apparently it's mispelt there). When you fully understand the manual on portforward.com, we may continue. For a Deus Ex server, you need to forward the following ports: 7790, 7791, 7792, 8777, 27900. You need to open these ports in these ways: TCP + UDP. I have no experience in TCP or UDP alone, so if you can't choose both, try TCP first. So... if you know how to forward ports, and you forwarded those ports, it should be just fine, and you should be able to host. Sometimes it is not only the router which blocks it. After you opened the ports, and it's still not solved, disable the Windows Firewall, just for a test, you can enable this again after testing your server. How to disable Windows Firewall (it's present only in Windows XP): Start -> Configuration -> Classic View (only if you have Windows XP) -> Network Connections -> Right click on your connection -> Properties -> Advanced. In that window, you may disable it. Notice: It is possible that your Windows Firewall configuraration is somewhere else. Try to Google where it is located in your operational system. Written by Alex.","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" />Hosting"},{"location":"hosting/#hosting","text":"","title":"HOSTING"},{"location":"hosting/#server-starter","text":"","title":"Server Starter"},{"location":"hosting/#installing-mods","text":"Place files in the propor directories inside the Deus Ex game folder; .u - /System/ .utx - /Textures/ .uax - /Sounds/ .umx - /Music/ .int - /System/ .ini - /System/ Open up DeusEx.ini and find the ServerPackages list, it'll look like; [DeusEx.DeusExGameEngine] CacheSizeMegs=4 UseSound=True ServerActors=IpDrv.UdpBeacon ServerActors=Nephthys.NptServerQuery ServerActors=Nephthys.NptServerUplink MasterServerAddress=master.333networks.com MasterServerPort=27900 ServerActors=Nephthys.NptServerUplink MasterServerAddress=master0.gamespy.com MasterServerPort=27900 ServerActors=Nephthys.NptServerUplink MasterServerAddress=master.epicgames.com MasterServerPort=27900 ServerActors=Nephthys.NptServerUplink MasterServerAddress=master.fragaholic.com MasterServerPort=27900 ServerPackages=DXMTL152b1 At the end of that list, add the .u file name to the list, without the .u, for example, if we have a mod called AM.u , we'll add ServerPackages=AM If the mod has a mutator or actor that should be spawned always in the server, the format is ServerActors=PackageName.ClassName , example; ServerActors=AM.AMutator","title":"Installing mods"},{"location":"hosting/#port-forwarding","text":"Note; Some information here may be outdated. A router blocks a lot of unknown Internet connections, so if you try to host a Deus Ex server, and you have a router, it is possible that your server will not show up in the server list. We are going to solve that. First, go here and look up your router for the manual on how-to-forward-ports (in the list of games find \"Dues Ex\", apparently it's mispelt there). When you fully understand the manual on portforward.com, we may continue. For a Deus Ex server, you need to forward the following ports: 7790, 7791, 7792, 8777, 27900. You need to open these ports in these ways: TCP + UDP. I have no experience in TCP or UDP alone, so if you can't choose both, try TCP first. So... if you know how to forward ports, and you forwarded those ports, it should be just fine, and you should be able to host. Sometimes it is not only the router which blocks it. After you opened the ports, and it's still not solved, disable the Windows Firewall, just for a test, you can enable this again after testing your server.","title":"Port Forwarding"},{"location":"inventory/","text":"Deus Ex Knowledge Base WIP.","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" /><em>Inventory</em>"},{"location":"inventory/#deus-ex-knowledge-base","text":"WIP.","title":"Deus Ex Knowledge Base"},{"location":"object/","text":"Deus Ex Knowledge Base WIP.","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" /><em>Object</em>"},{"location":"object/#deus-ex-knowledge-base","text":"WIP.","title":"Deus Ex Knowledge Base"},{"location":"pawn/","text":"Deus Ex Knowledge Base WIP.","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" /><em>Pawn</em>"},{"location":"pawn/#deus-ex-knowledge-base","text":"WIP.","title":"Deus Ex Knowledge Base"},{"location":"player/","text":"Deus Ex Knowledge Base WIP.","title":"<img src=\"https://discordapp.com/assets/02c27b408520f8a5cdcd82082c43f53e.svg\" width=\"20\" height=\"20\" border=\"0\" /><em>Player</em>"},{"location":"player/#deus-ex-knowledge-base","text":"WIP.","title":"Deus Ex Knowledge Base"}]}